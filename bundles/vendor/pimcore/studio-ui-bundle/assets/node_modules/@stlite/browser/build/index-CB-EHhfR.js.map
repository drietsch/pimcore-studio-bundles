{"version":3,"file":"index-CB-EHhfR.js","sources":["../../../node_modules/@emotion-icons/open-iconic/Minus/Minus.esm.js","../../../node_modules/@emotion-icons/open-iconic/Plus/Plus.esm.js","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/NumberInput.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var Minus = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 3v2h8V3H0z\"\n  }));\n});\nMinus.displayName = 'Minus';\nexport var MinusDimensions = {\n  height: 8,\n  width: 8\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var Plus = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 0v3H0v2h3v3h2V5h3V3H5V0H3z\"\n  }));\n});\nPlus.displayName = 'Plus';\nexport var PlusDimensions = {\n  height: 8,\n  width: 8\n};","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledInputContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  alignItems: \"center\",\n  height: theme.sizes.minElementHeight,\n  // Mimic the baseweb's borders here, so we can apply the focus style\n  // to the entire container and not only the input itself\n  borderWidth: theme.sizes.borderWidth,\n  borderStyle: \"solid\",\n  // Mimic the logic from createThemeOverrides.\n  borderColor:\n    theme.colors.widgetBorderColor ||\n    theme.colors.widgetBackgroundColor ||\n    theme.colors.bgColor,\n  transitionDuration: \"200ms\",\n  transitionProperty: \"border\",\n  transitionTimingFunction: \"cubic-bezier(0.2, 0.8, 0.4, 1)\",\n  borderRadius: theme.radii.default,\n  overflow: \"hidden\", // Fix rounded corner being overlayed with corner of internal input.\n\n  \"&.focused\": {\n    borderColor: theme.colors.primary,\n  },\n\n  input: {\n    MozAppearance: \"textfield\",\n    \"&::-webkit-inner-spin-button, &::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: theme.spacing.none,\n    },\n  },\n}))\n\nexport const StyledInputControls = styled.div({\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignSelf: \"stretch\",\n})\n\nexport const StyledInputControl = styled.button(({ theme }) => ({\n  margin: theme.spacing.none,\n  border: \"none\",\n  height: theme.sizes.full,\n  display: \"flex\",\n  alignItems: \"center\",\n  width: theme.sizes.numberInputControlsWidth,\n  justifyContent: \"center\",\n  color: theme.colors.bodyText,\n  transition: \"color 300ms, backgroundColor 300ms\",\n  // Mimic the logic from createThemeOverrides.\n  backgroundColor:\n    theme.colors.widgetBackgroundColor || theme.colors.secondaryBg,\n  \"&:hover:enabled, &:focus:enabled\": {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.primary,\n    transition: \"none\",\n    outline: \"none\",\n  },\n  \"&:active\": {\n    outline: \"none\",\n    border: \"none\",\n  },\n  \"&:last-of-type\": {\n    borderTopRightRadius: theme.radii.default,\n    borderBottomRightRadius: theme.radii.default,\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    color: theme.colors.fadedText40,\n  },\n}))\n\nexport interface StyledInstructionsContainerProps {\n  // If widget is clearable, the instruction needs to be moved a couple\n  // pixels to the left to avoid overlapping with the clear button.\n  clearable: boolean\n}\n\nexport const StyledInstructionsContainer =\n  styled.div<StyledInstructionsContainerProps>(({ theme, clearable }) => ({\n    position: \"absolute\",\n    marginRight: theme.spacing.twoXS,\n    left: 0,\n    // The instructions should be placed after the two controls\n    // and the clear button if it's present.\n    right: `calc(${theme.sizes.numberInputControlsWidth} * 2 + ${\n      clearable ? \"1em\" : \"0em\"\n    })`,\n  }))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nimport { Minus, Plus } from \"@emotion-icons/open-iconic\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport { Input as UIInput } from \"baseui/input\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport {\n  isInForm,\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { NumberInput as NumberInputProto } from \"@streamlit/lib/src/proto\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport {\n  StyledInputContainer,\n  StyledInputControl,\n  StyledInputControls,\n  StyledInstructionsContainer,\n} from \"./styled-components\"\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return isNullOrUndefined(value) || value === \"\" ? undefined : value\n}\n\n/**\n * This function returns the initial value for the NumberInput widget\n * via the widget manager.\n */\nconst getInitialValue = (\n  props: Pick<Props, \"element\" | \"widgetMgr\">\n): number | null => {\n  const isIntData = props.element.dataType === NumberInputProto.DataType.INT\n  const storedValue = isIntData\n    ? props.widgetMgr.getIntValue(props.element)\n    : props.widgetMgr.getDoubleValue(props.element)\n  return storedValue ?? props.element.default ?? null\n}\n\nconst getStep = ({\n  step,\n  dataType,\n}: Pick<NumberInputProto, \"step\" | \"dataType\">): number => {\n  if (step) {\n    return step\n  }\n  if (dataType === NumberInputProto.DataType.INT) {\n    return 1\n  }\n  return 0.01\n}\n\n/**\n * Utilizes the sprintf library to format a number value\n * according to a given format string.\n */\nexport const formatValue = ({\n  value,\n  format,\n  step,\n  dataType,\n}: {\n  value: number | null\n  format?: string | null\n  step?: number\n  dataType: NumberInputProto.DataType\n}): string | null => {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  let formatString = getNonEmptyString(format)\n\n  if (isNullOrUndefined(formatString) && notNullOrUndefined(step)) {\n    const strStep = step.toString()\n    if (\n      dataType === NumberInputProto.DataType.FLOAT &&\n      step !== 0 &&\n      strStep.includes(\".\")\n    ) {\n      const decimalPlaces = strStep.split(\".\")[1].length\n      formatString = `%0.${decimalPlaces}f`\n    }\n  }\n\n  if (isNullOrUndefined(formatString)) {\n    return value.toString()\n  }\n\n  try {\n    return sprintf(formatString, value)\n  } catch (e) {\n    logWarning(`Error in sprintf(${formatString}, ${value}): ${e}`)\n    return String(value)\n  }\n}\n\nexport const canDecrement = (\n  value: number | null,\n  step: number,\n  min: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value - step >= min\n}\n\nexport const canIncrement = (\n  value: number | null,\n  step: number,\n  max: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value + step <= max\n}\n\nexport interface Props {\n  disabled: boolean\n  element: NumberInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n  fragmentId?: string\n}\n\nexport const NumberInput: React.FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  theme,\n  fragmentId,\n}: Props): ReactElement => {\n  const {\n    dataType: elementDataType,\n    id: elementId,\n    formId: elementFormId,\n    default: elementDefault,\n    format: elementFormat,\n  } = element\n  const min = element.hasMin ? element.min : -Infinity\n  const max = element.hasMax ? element.max : +Infinity\n\n  const [step, setStep] = useState<number>(getStep(element))\n  const initialValue = getInitialValue({ element, widgetMgr })\n  const [dirty, setDirty] = useState(false)\n  const [value, setValue] = useState<number | null>(initialValue)\n  const [formattedValue, setFormattedValue] = useState<string | null>(\n    formatValue({ value: initialValue, ...element, step })\n  )\n  const [isFocused, setIsFocused] = useState(false)\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const id = useRef(uniqueId(\"number_input_\"))\n\n  const canDec = canDecrement(value, step, min)\n  const canInc = canIncrement(value, step, max)\n\n  const inForm = isInForm({ formId: elementFormId })\n  // Allows form submission on Enter & displays Enter instructions, or if not in form and state is dirty\n  const allowEnterToSubmit = inForm\n    ? widgetMgr.allowFormEnterToSubmit(elementFormId)\n    : dirty\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    isFocused && width > theme.breakpoints.hideWidgetDetails\n\n  // Update the step if the props change\n  useEffect(() => {\n    setStep(getStep({ step: element.step, dataType: element.dataType }))\n  }, [element.dataType, element.step])\n\n  const commitValue = useCallback(\n    ({ value, source }: { value: number | null; source: Source }) => {\n      if (notNullOrUndefined(value) && (min > value || value > max)) {\n        inputRef.current?.reportValidity()\n      } else {\n        const newValue = value ?? elementDefault ?? null\n\n        switch (elementDataType) {\n          case NumberInputProto.DataType.INT:\n            widgetMgr.setIntValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          case NumberInputProto.DataType.FLOAT:\n            widgetMgr.setDoubleValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          default:\n            throw new Error(\"Invalid data type\")\n        }\n\n        setDirty(false)\n        setValue(newValue)\n        setFormattedValue(\n          formatValue({\n            value: newValue,\n            dataType: elementDataType,\n            format: elementFormat,\n            step,\n          })\n        )\n      }\n    },\n    [\n      min,\n      max,\n      inputRef,\n      widgetMgr,\n      fragmentId,\n      step,\n      elementDataType,\n      elementId,\n      elementFormId,\n      elementDefault,\n      elementFormat,\n    ]\n  )\n\n  const onBlur = useCallback((): void => {\n    if (dirty) {\n      commitValue({ value, source: { fromUi: true } })\n    }\n    setIsFocused(false)\n  }, [dirty, value, commitValue])\n\n  const onFocus = useCallback((): void => {\n    setIsFocused(true)\n  }, [])\n\n  const updateFromProtobuf = useCallback((): void => {\n    const { value } = element\n    element.setValue = false\n    setValue(value ?? null)\n    setFormattedValue(formatValue({ value: value ?? null, ...element, step }))\n    commitValue({ value: value ?? null, source: { fromUi: false } })\n  }, [element, step, commitValue])\n\n  // on component mount, we want to update the value from protobuf if setValue is true, otherwise commit current value\n  useEffect(() => {\n    if (element.setValue) {\n      updateFromProtobuf()\n    } else {\n      commitValue({ value, source: { fromUi: false } })\n    }\n\n    // I don't want to run this effect on every render, only on mount.\n    // Additionally, it's okay if commitValue changes, because we only call\n    // it once in the beginning anyways.\n    // TODO: Update to match React best practices\n    // eslint-disable-next-line react-compiler/react-compiler\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [])\n\n  // update from protobuf whenever component updates if element.setValue is truthy\n  if (element.setValue) {\n    updateFromProtobuf()\n  }\n\n  const clearable = isNullOrUndefined(element.default) && !disabled\n\n  const onFormCleared = useCallback(() => {\n    const newValue = element.default ?? null\n    setValue(newValue)\n    commitValue({ value: newValue, source: { fromUi: true } })\n  }, [element])\n\n  useFormClearHelper({\n    element,\n    widgetMgr,\n    onFormCleared,\n  })\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target\n\n    if (value === \"\") {\n      setDirty(true)\n      setValue(null)\n      setFormattedValue(null)\n    } else {\n      let numValue: number\n\n      if (element.dataType === NumberInputProto.DataType.INT) {\n        numValue = parseInt(value, 10)\n      } else {\n        numValue = parseFloat(value)\n      }\n\n      setDirty(true)\n      setValue(numValue)\n      setFormattedValue(value)\n    }\n  }\n\n  const increment = useCallback(() => {\n    if (canInc) {\n      setDirty(true)\n      commitValue({ value: (value ?? min) + step, source: { fromUi: true } })\n    }\n  }, [value, min, step, canInc])\n\n  const decrement = useCallback(() => {\n    if (canDec) {\n      setDirty(true)\n      commitValue({ value: (value ?? max) - step, source: { fromUi: true } })\n    }\n  }, [value, max, step, canDec])\n\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const { key } = e\n\n      switch (key) {\n        case \"ArrowUp\":\n          e.preventDefault()\n          increment()\n          break\n        case \"ArrowDown\":\n          e.preventDefault()\n          decrement()\n          break\n        default:\n      }\n    },\n    [increment, decrement]\n  )\n\n  const onKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      if (e.key === \"Enter\") {\n        if (dirty) {\n          commitValue({ value, source: { fromUi: true } })\n        }\n        if (widgetMgr.allowFormEnterToSubmit(elementFormId)) {\n          widgetMgr.submitForm(elementFormId, fragmentId)\n        }\n      }\n    },\n    [dirty, value, commitValue, widgetMgr, elementFormId, fragmentId]\n  )\n\n  return (\n    <div\n      className=\"stNumberInput\"\n      data-testid=\"stNumberInput\"\n      style={{ width }}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id.current}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <StyledInputContainer\n        className={isFocused ? \"focused\" : \"\"}\n        data-testid=\"stNumberInputContainer\"\n      >\n        <UIInput\n          type=\"number\"\n          inputRef={inputRef}\n          value={formattedValue ?? \"\"}\n          placeholder={element.placeholder}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onChange={onChange}\n          onKeyPress={onKeyPress}\n          onKeyDown={onKeyDown}\n          clearable={clearable}\n          clearOnEscape={clearable}\n          disabled={disabled}\n          aria-label={element.label}\n          id={id.current}\n          overrides={{\n            ClearIconContainer: {\n              style: {\n                padding: 0,\n              },\n            },\n            ClearIcon: {\n              props: {\n                overrides: {\n                  Svg: {\n                    style: {\n                      color: theme.colors.darkGray,\n                      // setting this width and height makes the clear-icon align with dropdown arrows of other input fields\n                      padding: theme.spacing.threeXS,\n                      height: theme.sizes.clearIconSize,\n                      width: theme.sizes.clearIconSize,\n                      \":hover\": {\n                        fill: theme.colors.bodyText,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            Input: {\n              props: {\n                \"data-testid\": \"stNumberInputField\",\n                step: step,\n                min: min,\n                max: max,\n                // We specify the type as \"number\" to have numeric keyboard on mobile devices.\n                // We also set inputMode to \"\" since by default BaseWeb sets \"text\",\n                // and for \"decimal\" / \"numeric\" IOS shows keyboard without a minus sign.\n                type: \"number\",\n                inputMode: \"\",\n              },\n              style: {\n                lineHeight: theme.lineHeights.inputWidget,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            InputContainer: {\n              style: () => ({\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n              }),\n            },\n            Root: {\n              style: {\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n                borderLeftWidth: 0,\n                borderRightWidth: 0,\n                borderTopWidth: 0,\n                borderBottomWidth: 0,\n                paddingRight: 0,\n              },\n            },\n          }}\n        />\n        {/* We only want to show the increment/decrement controls when there is sufficient room to display the value and these controls. */}\n        {width > theme.breakpoints.hideNumberInputControls && (\n          <StyledInputControls>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepDown\"\n              onClick={decrement}\n              disabled={!canDec || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Minus}\n                size=\"xs\"\n                color={canDec ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepUp\"\n              onClick={increment}\n              disabled={!canInc || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Plus}\n                size=\"xs\"\n                color={canInc ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n          </StyledInputControls>\n        )}\n      </StyledInputContainer>\n      {shouldShowInstructions && (\n        <StyledInstructionsContainer clearable={clearable}>\n          <InputInstructions\n            dirty={dirty}\n            value={formattedValue ?? \"\"}\n            inForm={inForm}\n            allowEnterToSubmit={allowEnterToSubmit}\n          />\n        </StyledInstructionsContainer>\n      )}\n    </div>\n  )\n}\n\nexport default withTheme(NumberInput)\n"],"names":["Minus","React.forwardRef","props","ref","attrs","React.createElement","EmotionIconBase","_extends","Plus","StyledInputContainer","target","theme","display","flexDirection","flexWrap","alignItems","height","sizes","minElementHeight","borderWidth","borderStyle","borderColor","colors","widgetBorderColor","widgetBackgroundColor","bgColor","transitionDuration","transitionProperty","transitionTimingFunction","borderRadius","radii","default","overflow","primary","input","MozAppearance","WebkitAppearance","margin","spacing","none","StyledInputControls","name","styles","StyledInputControl","border","full","width","numberInputControlsWidth","justifyContent","color","bodyText","transition","backgroundColor","secondaryBg","white","outline","borderTopRightRadius","borderBottomRightRadius","cursor","fadedText40","StyledInstructionsContainer","clearable","position","marginRight","twoXS","left","right","getNonEmptyString","value","isNullOrUndefined","undefined","getInitialValue","element","dataType","NumberInputProto","DataType","INT","widgetMgr","getIntValue","getDoubleValue","getStep","step","formatValue","format","formatString","notNullOrUndefined","strStep","toString","FLOAT","includes","split","length","sprintf","String","canDecrement","min","canIncrement","max","NumberInput","disabled","fragmentId","elementDataType","id","elementId","formId","elementFormId","elementDefault","elementFormat","hasMin","hasMax","setStep","useState","initialValue","dirty","setDirty","setValue","formattedValue","setFormattedValue","isFocused","setIsFocused","inputRef","useRef","uniqueId","canDec","canInc","inForm","isInForm","allowEnterToSubmit","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","useEffect","commitValue","useCallback","source","current","reportValidity","newValue","setIntValue","setDoubleValue","Error","onBlur","fromUi","onFocus","updateFromProtobuf","onFormCleared","useFormClearHelper","onChange","e","numValue","parseInt","parseFloat","increment","decrement","onKeyDown","key","preventDefault","onKeyPress","submitForm","jsx","WidgetLabel","label","labelVisibilityProtoValueToEnum","labelVisibility","help","StyledWidgetLabelHelp","TooltipIcon","Placement","TOP_RIGHT","UIInput","placeholder","ClearIconContainer","style","padding","ClearIcon","overrides","Svg","darkGray","threeXS","clearIconSize","fill","Input","type","inputMode","lineHeight","lineHeights","inputWidget","paddingRight","sm","paddingLeft","paddingBottom","paddingTop","InputContainer","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","hideNumberInputControls","Icon","InputInstructions","withTheme"],"mappings":"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","x_google_ignoreList":[0,1]}