{"version":3,"file":"worker-C6hgRT55.js","sources":["../../common/dist/promise-delegate.js","../../../node_modules/path-browserify/index.js","../../kernel/dist/file.js","../../common/src/requirements.ts","../../kernel/dist/pyodide-loader.js","../../kernel/dist/mock.js","../../kernel/dist/module-auto-load.js","../../kernel/dist/language-server/code_completion.js","../../kernel/dist/language-server/language-server-loader.js","../../kernel/dist/worker-runtime.js","../../kernel/dist/app-id.js","../../kernel/dist/worker.js"],"sourcesContent":["export class PromiseDelegate {\n    promise;\n    resolveInternal;\n    rejectInternal;\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolveInternal = resolve;\n            this.rejectInternal = reject;\n        });\n    }\n    resolve(value) {\n        this.resolveInternal(value);\n    }\n    reject(reason) {\n        this.rejectInternal(reason);\n    }\n}\n//# sourceMappingURL=promise-delegate.js.map","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","import path from \"path-browserify\";\nexport const globalHomeDir = \"/home/pyodide\";\nexport const getAppHomeDir = (appId) => `${globalHomeDir}/${appId}`;\nexport const resolveAppPath = (appId, filePath) => {\n    if (appId == null) {\n        return path.resolve(globalHomeDir, filePath);\n    }\n    return path.resolve(getAppHomeDir(appId), filePath);\n};\nfunction ensureParent(pyodide, // XXX: This is a temporary workaround to fix the type error.\nfilePath) {\n    const normalized = path.normalize(filePath);\n    const dirPath = path.dirname(normalized);\n    const dirNames = dirPath.split(\"/\");\n    const chDirNames = [];\n    for (const dirName of dirNames) {\n        chDirNames.push(dirName);\n        const dirPath = chDirNames.join(\"/\");\n        if (pyodide.FS.analyzePath(dirPath).exists) {\n            if (pyodide.FS.isDir(dirPath)) {\n                throw new Error(`\"${dirPath}\" already exists and is not a directory.`);\n            }\n            continue;\n        }\n        try {\n            pyodide.FS.mkdir(dirPath);\n        }\n        catch (err) {\n            console.error(`Failed to create a directory \"${dirPath}\"`);\n            throw err;\n        }\n    }\n}\nexport function writeFileWithParents(pyodide, // XXX: This is a temporary workaround to fix the type error.\nfilePath, data, opts) {\n    ensureParent(pyodide, filePath);\n    pyodide.FS.writeFile(filePath, data, opts);\n}\nexport function renameWithParents(pyodide, // XXX: This is a temporary workaround to fix the type error.\noldPath, newPath) {\n    ensureParent(pyodide, newPath);\n    pyodide.FS.rename(oldPath, newPath);\n}\n//# sourceMappingURL=file.js.map","// Ref: https://peps.python.org/pep-0508/#grammar\nconst FIRST_CHAR_OF_EXTRAS = \"[\";\nconst FIRST_CHAR_OF_VERSIONSPEC = \"(<=>!~\";\nconst FIRST_CHAR_OF_QUOTED_MARKER = \";\";\nconst FIRST_CHAR_OF_URLSPEC = \"@\";\nconst RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP = new RegExp(\n  `[${\n    FIRST_CHAR_OF_EXTRAS +\n    FIRST_CHAR_OF_VERSIONSPEC +\n    FIRST_CHAR_OF_QUOTED_MARKER +\n    FIRST_CHAR_OF_URLSPEC\n  }]`,\n);\nfunction getPackageName(req: string): string {\n  const parts = req.split(RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP);\n  return parts[0].trim();\n}\n\nexport function validateRequirements(requirements: string[]): string[] {\n  requirements.forEach((req) => {\n    let url: URL;\n    try {\n      url = new URL(req);\n    } catch {\n      // `req` is not a URL -> OK\n      return;\n    }\n\n    // Ref: The scheme checker in the micropip implementation is https://github.com/pyodide/micropip/blob/v0.1.0/micropip/_compat_in_pyodide.py#L23-L26\n    if (url.protocol === \"emfs:\" || url.protocol === \"file:\") {\n      throw new Error(\n        `\"emfs:\" and \"file:\" protocols are not allowed for the requirement (${req})`,\n      );\n    }\n  });\n\n  const validatedRequirements = requirements.filter((req) => {\n    const isStreamlit = getPackageName(req) === \"streamlit\";\n    if (isStreamlit) {\n      console.warn(\n        `Streamlit is specified in the requirements (\"${req}\"), but it will be ignored. A built-in version of Streamlit will be used.`,\n      );\n      return false;\n    }\n\n    return true;\n  });\n\n  return validatedRequirements;\n}\n","/// <reference lib=\"WebWorker\" />\nexport async function resolvePyodideUrl(pyodideUrl) {\n    const isNode = typeof process !== \"undefined\" && process.versions?.node;\n    let sep;\n    if (isNode) {\n        const nodePath = await import(/* webpackIgnore: true */ \"node:path\");\n        sep = nodePath.sep;\n    }\n    else {\n        sep = \"/\"; // URL path separator\n    }\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/kernel.ts#L55\n    const pyodideIndexURL = pyodideUrl.slice(0, pyodideUrl.lastIndexOf(sep) + 1);\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/worker.ts#L40-L54\n    if (pyodideUrl.endsWith(\".mjs\")) {\n        if (isNode) {\n            // Special care for Node.js on Windows because the `file://` scheme is required in the URL passed to import() on Windows. See https://github.com/whitphx/stlite/issues/957\n            const nodePath = await import(/* webpackIgnore: true */ \"node:path\");\n            const nodeUrl = await import(/* webpackIgnore: true */ \"node:url\");\n            const possiblyLocalFilePath = !pyodideUrl.includes(\"://\");\n            if (possiblyLocalFilePath && nodePath.isAbsolute(pyodideUrl)) {\n                pyodideUrl = nodeUrl.pathToFileURL(pyodideUrl).href;\n            }\n        }\n        return {\n            scriptURL: pyodideUrl,\n            pyodideIndexURL,\n            isESModule: true,\n        };\n    }\n    else {\n        return {\n            scriptURL: pyodideUrl,\n            pyodideIndexURL,\n            isESModule: false,\n        };\n    }\n}\nexport async function initPyodide(pyodideUrl, loadPyodideOptions) {\n    const { scriptURL, pyodideIndexURL, isESModule } = await resolvePyodideUrl(pyodideUrl);\n    // Ref: https://github.com/jupyterlite/pyodide-kernel/blob/v0.1.3/packages/pyodide-kernel/src/worker.ts#L40-L54\n    let loadPyodide;\n    if (isESModule) {\n        // note: this does not work at all in firefox\n        const pyodideModule = await import(\n        /* webpackIgnore: true */ /* @vite-ignore */ scriptURL);\n        loadPyodide = pyodideModule.loadPyodide;\n    }\n    else {\n        importScripts(scriptURL);\n        loadPyodide = self.loadPyodide;\n    }\n    return loadPyodide({ ...loadPyodideOptions, indexURL: pyodideIndexURL });\n}\n//# sourceMappingURL=pyodide-loader.js.map","export function mockPyArrow(pyodide) {\n    pyodide.runPython(`\nimport micropip\nmicropip.add_mock_package(\n    \"pyarrow\", \"0.0.1\",\n    modules={\n        \"pyarrow\": \"\"\"\n__version__ = '0.0.1'  # TODO: Update when releasing\n\n\nclass Table:\n    @classmethod\n    def from_pandas(*args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting this method.\")\n\n\nclass Array:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting PyArrow.Array\")\n\n\nclass ChunkedArray:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\"stlite is not supporting PyArrow.ChunkedArray\")\n\"\"\"\n    }\n)\n`);\n}\n//# sourceMappingURL=mock.js.map","export async function tryModuleAutoLoad(pyodide, postMessage, sources) {\n    // Ref: `pyodide.loadPackagesFromImports` (https://github.com/pyodide/pyodide/blob/0.26.0/src/js/api.ts#L191)\n    const pyodidePy = pyodide.pyimport(\"pyodide\");\n    const findImports = (source) => pyodidePy.code.find_imports(source).toJs();\n    const importsArr = sources.map((source) => findImports(source));\n    const imports = Array.from(new Set(importsArr.flat()));\n    const notFoundImports = imports.filter((name) => !pyodide.runPython(`__import__('importlib').util.find_spec('${name}')`));\n    const packagesToLoad = notFoundImports\n        .map((name) => pyodide._api._import_name_to_package_name.get(name))\n        .filter((name) => name);\n    if (packagesToLoad.length === 0) {\n        return;\n    }\n    const channel = new MessageChannel();\n    postMessage({\n        type: \"event:moduleAutoLoad\",\n        data: {\n            packagesToLoad,\n        },\n    }, channel.port2);\n    try {\n        const loadedPackages = await pyodide.loadPackage(packagesToLoad);\n        channel.port1.postMessage({\n            type: \"moduleAutoLoad:success\",\n            data: {\n                loadedPackages,\n            },\n        });\n        channel.port1.close();\n        return;\n    }\n    catch (error) {\n        channel.port1.postMessage({\n            type: \"moduleAutoLoad:error\",\n            error: error,\n        });\n        channel.port1.close();\n        throw error;\n    }\n}\n//# sourceMappingURL=module-auto-load.js.map","export const defineCodeCompletionsFunction = async (pyodide) => {\n    // Indentation is very important in python, don't change this!\n    await pyodide.runPythonAsync(`import jedi\nimport re\nimport json\nfrom typing import Dict\nfrom lsprotocol.types import (CompletionItem, CompletionList, CompletionItemKind, Position, Range, TextEdit)\nfrom lsprotocol import converters as lsp_converters\nfrom jedi.api.classes import Completion\n\ndef as_completion_item_kind(kind: str):\n  match kind:\n    case 'class':\n      return CompletionItemKind.Class\n    case 'function':\n      return CompletionItemKind.Function\n    case 'instance':\n      return CompletionItemKind.Reference\n    case 'keyword':\n      return CompletionItemKind.Keyword\n    case 'module':\n      return CompletionItemKind.Module\n    case 'param':\n      return CompletionItemKind.Variable\n    case 'path':\n      return CompletionItemKind.File\n    case 'property':\n      return CompletionItemKind.Property\n    case 'statement':\n      return CompletionItemKind.Variable\n    case _:\n      return CompletionItemKind.Text\n\ndef as_completion_item_sort_text(item: Completion) -> str:\n  \"\"\"Generate sorting text to arrange items alphabetically, \n  ensuring parameters are prioritized first \n  and private magic properties come last.\n  \"\"\"\n  completion_item_name = item.name\n  if completion_item_name is None or completion_item_name.startswith('_'):\n     return f\"zz{completion_item_name}\"\n  elif item.type == \"param\" and completion_item_name.endswith(\"=\"):\n     return f\"aa{completion_item_name}\"\n  else:\n      return f\"bb{completion_item_name}\"\n\ndef as_completion_item(completion: Completion, cursor_range: Range) -> Dict:\n  label = completion.name\n  return CompletionItem(\n      label=label,\n      filter_text=label,\n      sort_text=as_completion_item_sort_text(completion),\n      kind=as_completion_item_kind(completion.type),\n      documentation=completion.docstring(raw=True),\n      text_edit=TextEdit(range=cursor_range, new_text=label),\n  )\n\ndef get_text_edit_cursor_range(cursor_code_line: str, current_line_number: int, cursor_offset: int):\n  # Match the substring starting from cursor_offset ex: math<cursor>co, match co\n  matched_words = re.search(r'\\\\b\\\\w+\\\\b', cursor_code_line[cursor_offset :])\n\n  # Determine the length of the matched word characters\n  word_after_cursor_length = len(matched_words.group()) if matched_words else 0\n\n  # This will tell to code editors which text to edit/replace\n  return Range(\n    start=Position(\n        line=current_line_number, character=cursor_offset\n    ),\n    end=Position(\n        line=current_line_number,\n        character=cursor_offset + word_after_cursor_length,\n    ),\n  )\n\ndef get_code_completions(code: str, current_line_number: int, cursor_offset: int):\n\n  jedi_language_server = jedi.Script(code)\n\n  # jedi returns a zero-based array with lines \n  jedi_line_number_index = current_line_number -1\n\n  # In case if we are not getting any results back or the offset is wrong\n  # Just return empty list\n  if jedi_line_number_index >= len(jedi_language_server._code_lines):\n   return json.dumps({ \"items\": []})\n\n  jedi_completions_list = jedi_language_server.complete(\n      current_line_number,\n      cursor_offset,\n      fuzzy=False,\n  )\n  \n  code_at_cursor = jedi_language_server._code_lines[jedi_line_number_index]\n  cursor_range = get_text_edit_cursor_range(code_at_cursor, current_line_number, cursor_offset)\n\n  # Convert jedi completion items as completion items compatible in language server\n  suggestions = CompletionList(\n    is_incomplete=False, \n    items=list(as_completion_item(completion, cursor_range) for completion in jedi_completions_list))\n\n  # Convert results to JSON so that we can use it in the worker\n  converter = lsp_converters.get_converter()\n  return json.dumps(converter.unstructure(suggestions, unstructure_as=CompletionList))\n`);\n};\nexport const getCodeCompletions = async (payload, pyodide) => {\n    let get_code_completions;\n    try {\n        // Get the proxy for get_code_completions in the JS world\n        get_code_completions = pyodide.globals.get(\"get_code_completions\");\n        if (!get_code_completions) {\n            console.error(\"Can not generate suggestions list, the get_code_completions function is not defined\");\n            return { items: [] };\n        }\n        // Then call it from JS\n        const result = get_code_completions(payload.code, payload.currentLineNumber, payload.offset);\n        if (!result) {\n            return { items: [] };\n        }\n        return JSON.parse(result);\n    }\n    catch (err) {\n        console.error(err);\n        return { items: [] };\n    }\n    finally {\n        // Python objects must be manually destroyed when passed to Javascript\n        // or they will create a memory leak\n        // https://pyodide.org/en/0.16.1/type_conversions.html#python-from-javascript\n        if (get_code_completions &&\n            get_code_completions.constructor.name === \"PyProxy\") {\n            get_code_completions.destroy();\n        }\n    }\n};\n//# sourceMappingURL=code_completion.js.map","import { defineCodeCompletionsFunction } from \"./code_completion\";\n/**\n * Imports the necessary python packages to enable language server features\n */\nexport const importLanguageServerLibraries = async (pyodide, micropip) => {\n    try {\n        console.debug(\"Importing jedi Interpreter\");\n        await micropip.install.callKwargs([\"jedi\", \"lsprotocol\"], {\n            keep_going: true,\n        });\n        await defineCodeCompletionsFunction(pyodide);\n    }\n    catch (err) {\n        console.error(\"Error while importing jedi\", err);\n    }\n};\n//# sourceMappingURL=language-server-loader.js.map","/// <reference lib=\"WebWorker\" />\nimport { PromiseDelegate } from \"@stlite/common\";\nimport { resolveAppPath, getAppHomeDir, writeFileWithParents, renameWithParents, } from \"./file\";\nimport { validateRequirements } from \"@stlite/common/src/requirements\";\nimport { initPyodide } from \"./pyodide-loader\";\nimport { mockPyArrow } from \"./mock\";\nimport { tryModuleAutoLoad } from \"./module-auto-load\";\nimport { importLanguageServerLibraries } from \"./language-server/language-server-loader\";\nimport { getCodeCompletions } from \"./language-server/code_completion\";\nif (typeof global !== \"undefined\" && typeof global.self === \"undefined\") {\n    // In the case of classic workers, `self` is not available in a global scope, so we need to define it here.\n    // The desktop packages' NodeJS worker mode uses classic workers, for example.\n    // @ts-expect-error globalThis is not defined in the Web Worker context\n    self = global;\n}\nfunction dispatchModuleAutoLoading(pyodide, postMessage, sources) {\n    const autoLoadPromise = tryModuleAutoLoad(pyodide, postMessage, sources);\n    // `autoInstallPromise` will be awaited in the script_runner on the Python side.\n    self.__moduleAutoLoadPromise__ = autoLoadPromise;\n    pyodide.runPythonAsync(`\nfrom streamlit.runtime.scriptrunner import script_runner\nfrom js import __moduleAutoLoadPromise__\n\nscript_runner.moduleAutoLoadPromise = __moduleAutoLoadPromise__\n`);\n}\nlet initPyodidePromise = null;\nexport function startWorkerEnv(defaultPyodideUrl, postMessage, presetInitialData, appId) {\n    function postProgressMessage(message) {\n        postMessage({\n            type: \"event:progress\",\n            data: {\n                message,\n            },\n        });\n    }\n    let pyodide; // XXX: This is a temporary workaround to fix the type error.\n    let httpServer;\n    const initDataPromiseDelegate = new PromiseDelegate();\n    /**\n     * Load Pyodided and initialize the interpreter.\n     *\n     * NOTE: This implementation is based on JupyterLite@v0.1.0a16.\n     *       Since v0.1.0a17, a wrapper around micropip, piplite, has been introduced\n     *       and the importing strategy of pyolite and other packages has been changed.\n     *       We might need to catch up it.\n     *       https://github.com/jupyterlite/jupyterlite/pull/310\n     */\n    async function loadPyodideAndPackages() {\n        const initialDataFromMessage = await initDataPromiseDelegate.promise;\n        const initData = {\n            ...presetInitialData,\n            ...initialDataFromMessage,\n        };\n        console.debug(\"Initial data\", initData);\n        const { entrypoint, files, archives, requirements: unvalidatedRequirements, prebuiltPackageNames: prebuiltPackages, wheels, pyodideUrl = defaultPyodideUrl, streamlitConfig, idbfsMountpoints, nodefsMountpoints, moduleAutoLoad, env, languageServer, } = initData;\n        const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n        if (initPyodidePromise) {\n            postProgressMessage(\"Pyodide is already loaded.\");\n            console.debug(\"Pyodide is already loaded.\");\n            pyodide = await initPyodidePromise;\n        }\n        else {\n            postProgressMessage(\"Loading Pyodide.\");\n            console.debug(\"Loading Pyodide.\");\n            initPyodidePromise = initPyodide(pyodideUrl, {\n                stdout: console.log,\n                stderr: console.error,\n            });\n            pyodide = await initPyodidePromise;\n            if (env) {\n                // We could've used the env parameter in pyodide initialization,\n                // but then some default environment variables like HOME were not set.\n                const os = pyodide.pyimport(\"os\");\n                os.environ.update(pyodide.toPy(env));\n            }\n            if (wheels) {\n                // NOTE: It's important to install the user-specified requirements\n                // and the custom Streamlit and stlite wheels in the same `micropip.install` call below,\n                // which satisfies the following two requirements:\n                // 1. It allows users to specify the versions of Streamlit's dependencies via requirements.txt\n                // before these versions are automatically resolved by micropip when installing Streamlit from the custom wheel\n                // (installing the user-reqs must be earlier than or equal to installing the custom wheels).\n                // 2. It also resolves the `streamlit` package version required by the user-specified requirements to the appropriate version,\n                // which avoids the problem of https://github.com/whitphx/stlite/issues/675\n                // (installing the custom wheels must be earlier than or equal to installing the user-reqs).\n                requirements.unshift(wheels.streamlit);\n                requirements.unshift(wheels.stliteLib);\n            }\n            console.debug(\"Loaded Pyodide\");\n        }\n        let useIdbfs = false;\n        if (idbfsMountpoints) {\n            useIdbfs = true;\n            idbfsMountpoints.forEach((mountpoint) => {\n                pyodide.FS.mkdir(mountpoint);\n                pyodide.FS.mount(pyodide.FS.filesystems.IDBFS, {}, mountpoint);\n            });\n            await new Promise((resolve, reject) => {\n                pyodide.FS.syncfs(true, (err) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        }\n        if (nodefsMountpoints) {\n            Object.entries(nodefsMountpoints).forEach(([mountpoint, path]) => {\n                pyodide.FS.mkdir(mountpoint);\n                pyodide.FS.mount(pyodide.FS.filesystems.NODEFS, { root: path }, mountpoint);\n            });\n        }\n        // Mount files\n        postProgressMessage(\"Mounting files.\");\n        const pythonFilePaths = [];\n        await Promise.all(Object.keys(files).map(async (path) => {\n            const file = files[path];\n            path = resolveAppPath(appId, path);\n            let data;\n            if (\"url\" in file) {\n                console.debug(`Fetch a file from ${file.url}`);\n                data = await fetch(file.url)\n                    .then((res) => res.arrayBuffer())\n                    .then((buffer) => new Uint8Array(buffer));\n            }\n            else {\n                data = file.data;\n            }\n            console.debug(`Write a file \"${path}\"`);\n            writeFileWithParents(pyodide, path, data, files.opts);\n            if (path.endsWith(\".py\")) {\n                pythonFilePaths.push(path);\n            }\n        }));\n        // Unpack archives\n        postProgressMessage(\"Unpacking archives.\");\n        await Promise.all(archives.map(async (archive) => {\n            let buffer;\n            if (\"url\" in archive) {\n                console.debug(`Fetch an archive from ${archive.url}`);\n                buffer = await fetch(archive.url).then((res) => res.arrayBuffer());\n            }\n            else {\n                buffer = archive.buffer;\n            }\n            const { format, options } = archive;\n            console.debug(`Unpack an archive`, { format, options });\n            pyodide.unpackArchive(buffer, format, options);\n        }));\n        await pyodide.loadPackage(\"micropip\");\n        const micropip = pyodide.pyimport(\"micropip\");\n        postProgressMessage(\"Mocking some packages.\");\n        console.debug(\"Mock pyarrow\");\n        mockPyArrow(pyodide);\n        console.debug(\"Mocked pyarrow\");\n        // NOTE: Installing packages must be AFTER restoring the archives\n        // because they may contain packages to be restored into the site-packages directory.\n        postProgressMessage(\"Installing packages.\");\n        console.debug(\"Installing the prebuilt packages:\", prebuiltPackages);\n        await pyodide.loadPackage(prebuiltPackages);\n        console.debug(\"Installed the prebuilt packages\");\n        console.debug(\"Installing the requirements:\", requirements);\n        await micropip.install.callKwargs(requirements, { keep_going: true });\n        console.debug(\"Installed the requirements\");\n        if (moduleAutoLoad) {\n            const sources = pythonFilePaths.map((path) => pyodide.FS.readFile(path, { encoding: \"utf8\" }));\n            dispatchModuleAutoLoading(pyodide, postMessage, sources);\n        }\n        // The following code is necessary to avoid errors like `NameError: name '_imp' is not defined`\n        // at importing installed packages.\n        await pyodide.runPythonAsync(`\nimport importlib\nimportlib.invalidate_caches()\n`);\n        postProgressMessage(\"Loading streamlit package.\");\n        console.debug(\"Loading the Streamlit package\");\n        // Importing the `streamlit` module takes most of the time,\n        // so we first run this step independently for clearer logs and easy exec-time profiling.\n        // For https://github.com/whitphx/stlite/issues/427\n        await pyodide.runPythonAsync(`\nimport streamlit.runtime\n    `);\n        console.debug(\"Loaded the Streamlit package\");\n        postProgressMessage(\"Setting up the loggers.\");\n        console.debug(\"Setting the loggers\");\n        // Fix the Streamlit's logger instantiating strategy, which violates the standard and is problematic for us.\n        // See https://github.com/streamlit/streamlit/issues/4742\n        await pyodide.runPythonAsync(`\nimport logging\nimport streamlit.logger\n\nstreamlit.logger.get_logger = logging.getLogger\nstreamlit.logger.setup_formatter = None\nstreamlit.logger.update_formatter = lambda *a, **k: None\nstreamlit.logger.set_log_level = lambda *a, **k: None\n\nfor name in streamlit.logger._loggers.keys():\n    if name == \"root\":\n        name = \"streamlit\"\n    logger = logging.getLogger(name)\n    logger.propagate = True\n    logger.handlers.clear()\n    logger.setLevel(logging.NOTSET)\n\nstreamlit.logger._loggers = {}\n`);\n        // Then configure the logger.\n        const logCallback = (levelno, msg) => {\n            if (levelno >= 40) {\n                console.error(msg);\n            }\n            else if (levelno >= 30) {\n                console.warn(msg);\n            }\n            else if (levelno >= 20) {\n                console.info(msg);\n            }\n            else {\n                console.debug(msg);\n            }\n        };\n        self.__logCallback__ = logCallback;\n        await pyodide.runPythonAsync(`\ndef setup_loggers(streamlit_level, streamlit_message_format):\n    from js import __logCallback__\n\n\n    class JsHandler(logging.Handler):\n        def emit(self, record):\n            msg = self.format(record)\n            __logCallback__(record.levelno, msg)\n\n\n    root_message_format = \"%(levelname)s:%(name)s:%(message)s\"\n\n    root_logger = logging.getLogger()\n    root_logger.handlers.clear()\n    root_formatter = logging.Formatter(root_message_format)\n    root_handler = JsHandler()\n    root_handler.setFormatter(root_formatter)\n    root_logger.addHandler(root_handler)\n    root_logger.setLevel(logging.DEBUG)\n\n    streamlit_logger = logging.getLogger(\"streamlit\")\n    streamlit_logger.propagate = False\n    streamlit_logger.handlers.clear()\n    streamlit_formatter = logging.Formatter(streamlit_message_format)\n    streamlit_handler = JsHandler()\n    streamlit_handler.setFormatter(streamlit_formatter)\n    streamlit_logger.addHandler(streamlit_handler)\n    streamlit_logger.setLevel(streamlit_level.upper())\n`);\n        const streamlitLogLevel = (streamlitConfig?.[\"logger.level\"] ?? \"INFO\").toString();\n        const streamlitLogMessageFormat = streamlitConfig?.[\"logger.messageFormat\"] ?? \"%(asctime)s %(message)s\";\n        const setupLoggers = pyodide.globals.get(\"setup_loggers\");\n        setupLoggers(streamlitLogLevel, streamlitLogMessageFormat);\n        console.debug(\"Set the loggers\");\n        postProgressMessage(\"Mocking some Streamlit functions for the browser environment.\");\n        console.debug(\"Mocking some Streamlit functions\");\n        // Disable caching. See https://github.com/whitphx/stlite/issues/495\n        await pyodide.runPythonAsync(`\nimport streamlit\n\ndef is_cacheable_msg(msg):\n    return False\n\nstreamlit.runtime.runtime.is_cacheable_msg = is_cacheable_msg\n`);\n        console.debug(\"Mocked some Streamlit functions\");\n        if (useIdbfs) {\n            postProgressMessage(\"Setting up the IndexedDB filesystem synchronizer.\");\n            console.debug(\"Setting up the IndexedDB filesystem synchronizer\");\n            // IDBFS needs to be synced by calling `pyodide.FS.syncfs`.\n            // Ref: https://emscripten.org/docs/api_reference/Filesystem-API.html#filesystem-api-idbfs\n            let fsSyncing = false; // Sometimes `__scriptFinishedCallback__` is called many time at once so we avoid unnecessary simultaneous calls of `pyodide.FS.syncfs`.\n            self.__scriptFinishedCallback__ = () => {\n                console.debug(\"The script has finished. Syncing the filesystem.\");\n                if (!fsSyncing) {\n                    fsSyncing = true;\n                    pyodide.FS.syncfs(false, (err) => {\n                        fsSyncing = false;\n                        if (err) {\n                            console.error(err);\n                        }\n                    });\n                }\n            };\n            // TODO: Run the callback only for the current app in the case of SharedWorker mode, where multiple runtimes exist.\n            // Monkey-patch the `AppSession._on_scriptrunner_event` method to call `__scriptFinishedCallback__` when the script is finished.\n            await pyodide.runPythonAsync(`\nfrom streamlit.runtime.app_session import AppSession\nfrom streamlit.runtime.scriptrunner import ScriptRunnerEvent\nfrom js import __scriptFinishedCallback__\n\ndef wrap_app_session_on_scriptrunner_event(original_method):\n    def wrapped(self, *args, **kwargs):\n        if \"event\" in kwargs:\n            event = kwargs[\"event\"]\n            if event == ScriptRunnerEvent.SCRIPT_STOPPED_WITH_SUCCESS or event == ScriptRunnerEvent.SCRIPT_STOPPED_FOR_RERUN or event == ScriptRunnerEvent.SHUTDOWN:\n                __scriptFinishedCallback__()\n        return original_method(self, *args, **kwargs)\n    return wrapped\n\nAppSession._on_scriptrunner_event = wrap_app_session_on_scriptrunner_event(AppSession._on_scriptrunner_event)\n`);\n            console.debug(\"Set up the IndexedDB filesystem synchronizer\");\n        }\n        const canonicalEntrypoint = resolveAppPath(appId, entrypoint);\n        if (languageServer) {\n            postProgressMessage(\"Importing Language Server\");\n            await importLanguageServerLibraries(pyodide, micropip);\n        }\n        postProgressMessage(\"Booting up the Streamlit server.\");\n        // The following Python code is based on streamlit.web.cli.main_run().\n        console.debug(\"Setting up the Streamlit configuration\");\n        self.__sharedWorkerMode__ = appId != null;\n        self.__streamlitFlagOptions__ = {\n            // gatherUsageStats is disabled as default, but can be enabled explicitly by setting it to true.\n            \"browser.gatherUsageStats\": false,\n            ...streamlitConfig,\n            \"runner.fastReruns\": false, // Fast reruns do not work well with the async script runner of stlite. See https://github.com/whitphx/stlite/pull/550#issuecomment-1505485865.\n        };\n        await pyodide.runPythonAsync(`\nfrom stlite_lib.bootstrap import load_config_options, prepare\nfrom js import __sharedWorkerMode__, __streamlitFlagOptions__\n\nflag_options = __streamlitFlagOptions__.to_py()\nload_config_options(flag_options, __sharedWorkerMode__)\n\nmain_script_path = \"${canonicalEntrypoint}\"\nargs = []\n\nprepare(main_script_path, args)\n`);\n        console.debug(\"Set up the Streamlit configuration\");\n        console.debug(\"Booting up the Streamlit server\");\n        const Server = pyodide.pyimport(\"stlite_lib.server.Server\");\n        httpServer = Server(canonicalEntrypoint, appId ? getAppHomeDir(appId) : null);\n        await httpServer.start();\n        console.debug(\"Booted up the Streamlit server\");\n        postMessage({\n            type: \"event:loaded\",\n        });\n        return initData;\n    }\n    const pyodideReadyPromise = loadPyodideAndPackages().catch((error) => {\n        postMessage({\n            type: \"event:error\",\n            data: {\n                error,\n            },\n        });\n        throw error;\n    });\n    /**\n     * Process a message sent to the worker.\n     *\n     * @param event The message event to process\n     */\n    const onmessage = async (event) => {\n        const msg = event.data;\n        // Special case for transmitting the initial data\n        if (msg.type === \"initData\") {\n            initDataPromiseDelegate.resolve(msg.data);\n            return;\n        }\n        const { moduleAutoLoad } = await pyodideReadyPromise;\n        const messagePort = event.ports[0];\n        function reply(message) {\n            messagePort.postMessage(message);\n        }\n        try {\n            switch (msg.type) {\n                case \"reboot\": {\n                    console.debug(\"Reboot the Streamlit server\", msg.data);\n                    const { entrypoint } = msg.data;\n                    httpServer.stop();\n                    console.debug(\"Booting up the Streamlit server\");\n                    const Server = pyodide.pyimport(\"stlite_lib.server.Server\");\n                    httpServer = Server(entrypoint);\n                    httpServer.start();\n                    console.debug(\"Booted up the Streamlit server\");\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"websocket:connect\": {\n                    console.debug(\"websocket:connect\", msg.data);\n                    const { path } = msg.data;\n                    httpServer.start_websocket(path, (message, binary) => {\n                        // XXX: Now there is no session mechanism\n                        if (binary) {\n                            const messageProxy = message;\n                            const buffer = messageProxy.getBuffer(\"u8\");\n                            messageProxy.destroy();\n                            const payload = new Uint8ClampedArray(buffer.data.buffer, buffer.data.byteOffset, buffer.data.byteLength);\n                            postMessage({\n                                type: \"websocket:message\",\n                                data: {\n                                    payload: new Uint8Array(payload),\n                                },\n                            });\n                        }\n                        else {\n                            const messageStr = message;\n                            postMessage({\n                                type: \"websocket:message\",\n                                data: {\n                                    payload: messageStr,\n                                },\n                            });\n                        }\n                    });\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"websocket:send\": {\n                    console.debug(\"websocket:send\", msg.data);\n                    const { payload } = msg.data;\n                    httpServer.receive_websocket_from_js(payload);\n                    break;\n                }\n                case \"http:request\": {\n                    console.debug(\"http:request\", msg.data);\n                    const { request } = msg.data;\n                    const onResponse = (statusCode, _headers, _body) => {\n                        const headers = new Map(_headers.toJs()); // Pyodide converts dict to LiteralMap, not Map, which can't be cloned and sent to the main thread. So we convert it to Map here. Ref: https://github.com/pyodide/pyodide/pull/4576\n                        const body = _body.toJs();\n                        console.debug({ statusCode, headers, body });\n                        reply({\n                            type: \"http:response\",\n                            data: {\n                                response: {\n                                    statusCode,\n                                    headers,\n                                    body,\n                                },\n                            },\n                        });\n                    };\n                    httpServer.receive_http_from_js(request.method, decodeURIComponent(request.path), request.headers, request.body, onResponse);\n                    break;\n                }\n                case \"file:write\": {\n                    const { path: rawPath, data: fileData, opts } = msg.data;\n                    const path = resolveAppPath(appId, rawPath);\n                    if (moduleAutoLoad &&\n                        typeof fileData === \"string\" &&\n                        path.endsWith(\".py\")) {\n                        // Auto-install must be dispatched before writing the file\n                        // because its promise should be set before saving the file triggers rerunning.\n                        console.debug(`Auto install the requirements in ${path}`);\n                        dispatchModuleAutoLoading(pyodide, postMessage, [fileData]);\n                    }\n                    console.debug(`Write a file \"${path}\"`);\n                    writeFileWithParents(pyodide, path, fileData, opts);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:rename\": {\n                    const { oldPath: rawOldPath, newPath: rawNewPath } = msg.data;\n                    const oldPath = resolveAppPath(appId, rawOldPath);\n                    const newPath = resolveAppPath(appId, rawNewPath);\n                    console.debug(`Rename \"${oldPath}\" to ${newPath}`);\n                    renameWithParents(pyodide, oldPath, newPath);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:unlink\": {\n                    const { path: rawPath } = msg.data;\n                    const path = resolveAppPath(appId, rawPath);\n                    console.debug(`Remove \"${path}`);\n                    pyodide.FS.unlink(path);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"file:read\": {\n                    const { path, opts } = msg.data;\n                    console.debug(`Read \"${path}\"`);\n                    const content = pyodide.FS.readFile(path, opts);\n                    reply({\n                        type: \"reply:file:read\",\n                        data: {\n                            content,\n                        },\n                    });\n                    break;\n                }\n                case \"install\": {\n                    const { requirements: unvalidatedRequirements } = msg.data;\n                    const micropip = pyodide.pyimport(\"micropip\");\n                    const requirements = validateRequirements(unvalidatedRequirements); // Blocks the not allowed wheel URL schemes.\n                    console.debug(\"Install the requirements:\", requirements);\n                    await micropip.install\n                        .callKwargs(requirements, { keep_going: true })\n                        .then(() => {\n                        console.debug(\"Successfully installed\");\n                        reply({\n                            type: \"reply\",\n                        });\n                    });\n                    break;\n                }\n                case \"setEnv\": {\n                    const { env } = msg.data;\n                    const os = pyodide.pyimport(\"os\");\n                    os.environ.update(pyodide.toPy(env));\n                    console.debug(\"Successfully set the environment variables\", env);\n                    reply({\n                        type: \"reply\",\n                    });\n                    break;\n                }\n                case \"language-server:code_completion\": {\n                    const codeCompletions = await getCodeCompletions(msg.data, pyodide);\n                    reply({\n                        type: \"reply:language-server:code_completion\",\n                        data: codeCompletions,\n                    });\n                    break;\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n            if (!(error instanceof Error)) {\n                throw error;\n            }\n            // The `error` object may contain non-serializable properties such as function (for example Pyodide.FS.ErrnoError which has a `.setErrno` function),\n            // so it must be converted to a plain object before sending it to the main thread.\n            // Otherwise, the following error will be thrown:\n            // `Uncaught (in promise) DOMException: Failed to execute 'postMessage' on 'MessagePort': #<Object> could not be cloned.`\n            // Also, the JSON.stringify() and JSON.parse() approach like https://stackoverflow.com/a/42376465/13103190\n            // does not work for Error objects because the Error object is not enumerable.\n            // So we use the following approach to clone the Error object.\n            const cloneableError = new Error(error.message);\n            cloneableError.name = error.name;\n            cloneableError.stack = error.stack;\n            reply({\n                type: \"reply\",\n                error: cloneableError,\n            });\n        }\n    };\n    postMessage({\n        type: \"event:start\",\n    });\n    return onmessage;\n}\n//# sourceMappingURL=worker-runtime.js.map","const charset = \"abcdefghijklmnopqrstuvwxyz\";\nconst charsetSize = charset.length;\n// This is not cryptographically secure, but it's good enough for our use case.\nexport function generateRandomAppId(length) {\n    let id = \"\";\n    for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * charsetSize);\n        id += charset[randomIndex];\n    }\n    return id;\n}\n//# sourceMappingURL=app-id.js.map","/// <reference lib=\"WebWorker\" />\nimport { startWorkerEnv } from \"./worker-runtime\";\nimport { generateRandomAppId } from \"./app-id\";\nconst pyodideUrl = \"https://cdn.jsdelivr.net/pyodide/v0.27.3/full/pyodide.mjs\";\nif (\"postMessage\" in self) {\n    // Dedicated worker\n    self.onmessage = startWorkerEnv(pyodideUrl, (event, port) => port\n        ? self.postMessage(event, [port])\n        : self.postMessage(event));\n}\nelse {\n    // Shared worker\n    const existingAppIds = [];\n    self.onconnect = (event) => {\n        // Generate app ID and ensure it's unique.\n        let appId;\n        do {\n            appId = generateRandomAppId(4);\n        } while (existingAppIds.includes(appId));\n        existingAppIds.push(appId);\n        console.debug(\"SharedWorker mode.\", { appId });\n        const sharedWorkerPort = event.ports[0];\n        sharedWorkerPort.onmessage = startWorkerEnv(pyodideUrl, (event, port) => port\n            ? sharedWorkerPort.postMessage(event, [port])\n            : sharedWorkerPort.postMessage(event), undefined, appId);\n        sharedWorkerPort.start();\n    };\n}\n//# sourceMappingURL=worker.js.map"],"names":["PromiseDelegate","resolve","reject","value","reason","assertPath","path","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","lastSlashIndex","_format","sep","pathObject","dir","base","posix","resolvedPath","resolvedAbsolute","cwd","isAbsolute","trailingSeparator","joined","arg","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","length","lastCommonSep","fromCode","toCode","out","hasRoot","end","matchedSlash","ext","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","ret","pathBrowserify","globalHomeDir","getAppHomeDir","appId","resolveAppPath","filePath","ensureParent","pyodide","normalized","dirNames","chDirNames","dirName","dirPath","err","writeFileWithParents","data","opts","renameWithParents","oldPath","newPath","FIRST_CHAR_OF_EXTRAS","FIRST_CHAR_OF_VERSIONSPEC","FIRST_CHAR_OF_QUOTED_MARKER","FIRST_CHAR_OF_URLSPEC","RX_CHAR_FOLLOWING_NAME_WITHOUT_WSP","getPackageName","req","validateRequirements","requirements","url","resolvePyodideUrl","pyodideUrl","isNode","pyodideIndexURL","nodePath","nodeUrl","initPyodide","loadPyodideOptions","scriptURL","isESModule","loadPyodide","mockPyArrow","tryModuleAutoLoad","postMessage","sources","pyodidePy","findImports","source","importsArr","packagesToLoad","name","channel","loadedPackages","error","defineCodeCompletionsFunction","getCodeCompletions","payload","get_code_completions","result","importLanguageServerLibraries","micropip","dispatchModuleAutoLoading","autoLoadPromise","initPyodidePromise","startWorkerEnv","defaultPyodideUrl","presetInitialData","postProgressMessage","message","httpServer","initDataPromiseDelegate","loadPyodideAndPackages","initialDataFromMessage","initData","entrypoint","files","archives","unvalidatedRequirements","prebuiltPackages","wheels","streamlitConfig","idbfsMountpoints","nodefsMountpoints","moduleAutoLoad","env","languageServer","useIdbfs","mountpoint","pythonFilePaths","file","buffer","archive","format","options","logCallback","levelno","msg","streamlitLogLevel","streamlitLogMessageFormat","fsSyncing","canonicalEntrypoint","pyodideReadyPromise","onmessage","event","messagePort","reply","binary","messageProxy","request","onResponse","statusCode","_headers","_body","headers","body","rawPath","fileData","rawOldPath","rawNewPath","content","codeCompletions","cloneableError","charset","charsetSize","generateRandomAppId","id","randomIndex","port","existingAppIds","sharedWorkerPort"],"mappings":"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","x_google_ignoreList":[1]}