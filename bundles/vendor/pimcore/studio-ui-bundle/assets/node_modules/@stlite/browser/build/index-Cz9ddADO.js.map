{"version":3,"file":"index-Cz9ddADO.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Toast/styled-components.tsx","../../../streamlit/frontend/lib/src/components/elements/Toast/Toast.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledViewButton = styled.button(({ theme }) => ({\n  fontSize: theme.fontSizes.sm,\n  lineHeight: theme.lineHeights.base,\n  color: theme.colors.fadedText60,\n  backgroundColor: theme.colors.transparent,\n  fontFamily: \"inherit\",\n  margin: theme.spacing.none,\n  border: \"none\",\n  boxShadow: \"none\",\n  padding: theme.spacing.none,\n  \"&:hover, &:active, &:focus\": {\n    border: \"none\",\n    outline: \"none\",\n    boxShadow: \"none\",\n  },\n  \"&:hover\": {\n    color: theme.colors.primary,\n  },\n}))\n\ninterface StyledToastMessageProps {\n  expanded: boolean\n}\n\nexport const StyledToastWrapper = styled.div<StyledToastMessageProps>(\n  ({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: theme.spacing.lg,\n\n    \"> span\": {\n      marginTop: theme.spacing.twoXS,\n    },\n  })\n)\n\nexport const StyledIcon = styled.div(({ theme }) => ({\n  fontSize: theme.fontSizes.xl,\n}))\n\nexport const StyledMessageWrapper = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: theme.spacing.sm,\n  alignItems: \"start\",\n  // Align text to the center of the icon when only 1 line.\n  justifyContent: \"center\",\n  overflow: \"hidden\",\n  minHeight: \"100%\",\n  fontSize: theme.fontSizes.sm,\n  lineHeight: theme.lineHeights.base,\n  div: {\n    display: \"inline-flex\",\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\nimport { toaster, ToastOverrides } from \"baseui/toast\"\n\nimport {\n  EmotionTheme,\n  hasLightBackgroundColor,\n} from \"@streamlit/lib/src/theme\"\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport { Kind } from \"@streamlit/lib/src/components/shared/AlertContainer\"\nimport AlertElement from \"@streamlit/lib/src/components/elements/AlertElement/AlertElement\"\nimport { DynamicIcon } from \"@streamlit/lib/src/components/shared/Icon\"\n\nimport {\n  StyledMessageWrapper,\n  StyledToastWrapper,\n  StyledViewButton,\n} from \"./styled-components\"\n\nexport interface ToastProps {\n  theme: EmotionTheme\n  body: string\n  icon?: string\n  width: number\n}\n\nfunction generateToastOverrides(theme: EmotionTheme): ToastOverrides {\n  const lightBackground = hasLightBackgroundColor(theme)\n  return {\n    Body: {\n      props: {\n        \"data-testid\": \"stToast\",\n        className: \"stToast\",\n      },\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: theme.spacing.md,\n        width: theme.sizes.toastWidth,\n        marginTop: theme.spacing.sm,\n        // Warnings logged if you use shorthand property here:\n        borderTopLeftRadius: theme.radii.default,\n        borderTopRightRadius: theme.radii.default,\n        borderBottomLeftRadius: theme.radii.default,\n        borderBottomRightRadius: theme.radii.default,\n        paddingTop: theme.spacing.lg,\n        paddingBottom: theme.spacing.lg,\n        paddingLeft: theme.spacing.twoXL,\n        paddingRight: theme.spacing.twoXL,\n        backgroundColor: lightBackground\n          ? theme.colors.gray10\n          : theme.colors.gray90,\n        color: theme.colors.bodyText,\n        // Take standard BaseWeb shadow and adjust for dark backgrounds\n        boxShadow: lightBackground\n          ? \"0px 4px 16px rgba(0, 0, 0, 0.16)\"\n          : \"0px 4px 16px rgba(0, 0, 0, 0.7)\",\n      },\n    },\n    CloseIcon: {\n      style: {\n        color: theme.colors.fadedText40,\n        width: theme.fontSizes.lg,\n        height: theme.fontSizes.lg,\n        marginRight: `calc(-1 * ${theme.spacing.lg} / 2)`,\n        \":hover\": {\n          color: theme.colors.bodyText,\n        },\n      },\n    },\n  }\n}\n\n// Function used to truncate toast messages that are longer than three lines.\nexport function shortenMessage(fullMessage: string): string {\n  const characterLimit = 104\n\n  if (fullMessage.length > characterLimit) {\n    let message = fullMessage.replace(/^(.{104}[^\\s]*).*/, \"$1\")\n\n    if (message.length > characterLimit) {\n      message = message\n        .substring(0, characterLimit)\n        .split(\" \")\n        .slice(0, -1)\n        .join(\" \")\n    }\n\n    return message.trim()\n  }\n\n  return fullMessage\n}\n\nexport function Toast({\n  theme,\n  body,\n  icon,\n  width,\n}: Readonly<ToastProps>): ReactElement {\n  const displayMessage = shortenMessage(body)\n  const shortened = body !== displayMessage\n\n  const [expanded, setExpanded] = useState(!shortened)\n  const [toastKey, setToastKey] = useState<React.Key>(0)\n\n  const handleClick = useCallback((): void => {\n    setExpanded(!expanded)\n  }, [expanded])\n\n  const styleOverrides = useMemo(() => generateToastOverrides(theme), [theme])\n\n  const toastContent = useMemo(\n    () => (\n      <StyledToastWrapper expanded={expanded}>\n        {icon && (\n          <DynamicIcon\n            iconValue={icon}\n            size=\"xl\"\n            testid=\"stToastDynamicIcon\"\n          />\n        )}\n        <StyledMessageWrapper>\n          <StreamlitMarkdown\n            source={expanded ? body : displayMessage}\n            allowHTML={false}\n            isToast\n          />\n          {shortened && (\n            <StyledViewButton\n              data-testid=\"stToastViewButton\"\n              onClick={handleClick}\n            >\n              {expanded ? \"view less\" : \"view more\"}\n            </StyledViewButton>\n          )}\n        </StyledMessageWrapper>\n      </StyledToastWrapper>\n    ),\n    [shortened, expanded, body, icon, displayMessage, handleClick]\n  )\n\n  useEffect(() => {\n    // Handles the error case where st.sidebar.toast is called since\n    // baseweb would throw error anyway (no toast container in sidebar)\n    if (theme.inSidebar) {\n      return\n    }\n\n    // Uses toaster utility to create toast on mount and generate unique key\n    // to reference that toast for update/removal\n    const newKey = toaster.info(toastContent, {\n      overrides: { ...styleOverrides },\n    })\n    setToastKey(newKey)\n\n    return () => {\n      // Disable transition so toast doesn't flicker on removal\n      toaster.update(newKey, {\n        overrides: { Body: { style: { transitionDuration: 0 } } },\n      })\n      // Remove toast on unmount\n      toaster.clear(newKey)\n    }\n\n    // Array must be empty to run as mount/cleanup\n    // TODO: Update to match React best practices\n    // eslint-disable-next-line react-compiler/react-compiler\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    // Handles expand/collapse button behavior for long toast messages\n    toaster.update(toastKey, {\n      children: toastContent,\n      overrides: { ...styleOverrides },\n    })\n  }, [toastKey, toastContent, styleOverrides])\n\n  const sidebarErrorMessage = (\n    <AlertElement\n      kind={Kind.ERROR}\n      body=\"Streamlit API Error: `st.toast` cannot be called directly on the sidebar with `st.sidebar.toast`.\n        See our `st.toast` API [docs](https://docs.streamlit.io/develop/api-reference/status/st.toast) for more information.\"\n      width={width}\n    />\n  )\n  return (\n    // Shows error if toast is called on st.sidebar\n    <>{theme.inSidebar && sidebarErrorMessage}</>\n  )\n}\n\nexport default withTheme(Toast)\n"],"names":["StyledViewButton","target","theme","fontSize","fontSizes","sm","lineHeight","lineHeights","base","color","colors","fadedText60","backgroundColor","transparent","fontFamily","margin","spacing","none","border","boxShadow","padding","outline","primary","StyledToastWrapper","display","flexDirection","gap","lg","marginTop","twoXS","StyledMessageWrapper","alignItems","justifyContent","overflow","minHeight","div","generateToastOverrides","lightBackground","hasLightBackgroundColor","Body","props","className","style","md","width","sizes","toastWidth","borderTopLeftRadius","radii","default","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","paddingBottom","paddingLeft","twoXL","paddingRight","gray10","gray90","bodyText","CloseIcon","fadedText40","height","marginRight","shortenMessage","fullMessage","length","characterLimit","message","replace","substring","split","slice","join","trim","Toast","body","icon","displayMessage","shortened","expanded","setExpanded","useState","toastKey","setToastKey","handleClick","useCallback","styleOverrides","useMemo","toastContent","jsxs","DynamicIcon","jsx","StreamlitMarkdown","useEffect","inSidebar","newKey","toaster","info","overrides","update","transitionDuration","clear","children","sidebarErrorMessage","AlertElement","Kind","ERROR","Fragment","withTheme"],"mappings":"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"}