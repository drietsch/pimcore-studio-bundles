{"version":3,"file":"index-BB2dqKK5.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/Button/Button.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { Button as ButtonProto } from \"@streamlit/lib/src/proto\"\nimport BaseButton, {\n  BaseButtonKind,\n  BaseButtonSize,\n  BaseButtonTooltip,\n  DynamicButtonLabel,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport interface Props {\n  disabled: boolean\n  element: ButtonProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nfunction Button(props: Props): ReactElement {\n  const { disabled, element, widgetMgr, width, fragmentId } = props\n  const style = { width }\n\n  let kind = BaseButtonKind.SECONDARY\n  if (element.type === \"primary\") {\n    kind = BaseButtonKind.PRIMARY\n  } else if (element.type === \"tertiary\") {\n    kind = BaseButtonKind.TERTIARY\n  }\n\n  // When useContainerWidth true & has help tooltip,\n  // we need to pass the container width down to the button\n  const fluidWidth = element.help ? width : true\n\n  return (\n    <div className=\"stButton\" data-testid=\"stButton\" style={style}>\n      <BaseButtonTooltip help={element.help}>\n        <BaseButton\n          kind={kind}\n          size={BaseButtonSize.SMALL}\n          disabled={disabled}\n          fluidWidth={element.useContainerWidth ? fluidWidth : false}\n          onClick={() =>\n            widgetMgr.setTriggerValue(element, { fromUi: true }, fragmentId)\n          }\n        >\n          <DynamicButtonLabel icon={element.icon} label={element.label} />\n        </BaseButton>\n      </BaseButtonTooltip>\n    </div>\n  )\n}\n\nexport default Button\n"],"names":["Button","props","disabled","element","widgetMgr","width","fragmentId","style","kind","BaseButtonKind","SECONDARY","type","PRIMARY","TERTIARY","fluidWidth","help","jsx","BaseButtonTooltip","BaseButton","BaseButtonSize","SMALL","useContainerWidth","setTriggerValue","fromUi","DynamicButtonLabel","icon","label"],"mappings":";AAmCA,SAASA,EAAOC,GAA4B;AACpC,QAAA;AAAA,IAAEC,UAAAA;AAAAA,IAAUC,SAAAA;AAAAA,IAASC,WAAAA;AAAAA,IAAWC,OAAAA;AAAAA,IAAOC,YAAAA;AAAAA,EAAAA,IAAeL,GACtDM,IAAQ;AAAA,IAAEF,OAAAA;AAAAA,EAAM;AAEtB,MAAIG,IAAOC,EAAeC;AACtBP,EAAAA,EAAQQ,SAAS,YACnBH,IAAOC,EAAeG,UACbT,EAAQQ,SAAS,eAC1BH,IAAOC,EAAeI;AAKlBC,QAAAA,IAAaX,EAAQY,OAAOV,IAAQ;AAE1C,SACGW,gBAAAA,EAAAA,IAAA,OAAA,EAAI,WAAU,YAAW,eAAY,YAAW,OAAAT,GAC/C,UAAAS,gBAAAA,EAAAA,IAACC,GAAkB,EAAA,MAAMd,EAAQY,MAC/B,UAACC,gBAAAA,EAAAA,IAAAE,GAAA,EACC,MAAAV,GACA,MAAMW,EAAeC,OACrB,UAAAlB,GACA,YAAYC,EAAQkB,oBAAoBP,IAAa,IACrD,SAAS,MACPV,EAAUkB,gBAAgBnB,GAAS;AAAA,IAAEoB,QAAQ;AAAA,EAAA,GAAQjB,CAAU,GAGjE,UAAAU,gBAAAA,EAAA,IAACQ,GAAmB,EAAA,MAAMrB,EAAQsB,MAAM,OAAOtB,EAAQuB,MAAM,CAAA,EAC/D,CAAA,EACF,CAAA,GACF;AAEJ;"}