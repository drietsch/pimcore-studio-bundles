{"version":3,"file":"index-EydewFPy.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Video/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/Video/Video.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledVideoIframe = styled.iframe(({ theme }) => ({\n  colorScheme: \"normal\",\n  border: \"none\",\n  padding: theme.spacing.none,\n  margin: theme.spacing.none,\n  width: \"100%\",\n  aspectRatio: \"16 / 9\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n * Copyright (c) Yuichiro Tachibana (Tsuchiya) (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useMemo, useRef } from \"react\"\n\nimport { ISubtitleTrack, Video as VideoProto } from \"@streamlit/lib/src/proto\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { IS_DEV_ENV } from \"@streamlit/lib/src/baseconsts\"\nimport { WidgetStateManager as ElementStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useStliteMediaObjectUrl, useStliteMediaObjects } from \"@stlite/kernel\"\n\nimport { StyledVideoIframe } from \"./styled-components\"\n\nconst DEFAULT_HEIGHT = 528\n\nexport interface VideoProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: VideoProto\n  elementMgr: ElementStateManager\n}\n\nexport interface Subtitle {\n  label: string\n  url: string\n}\n\nexport default function Video({\n  element,\n  width,\n  endpoints,\n  elementMgr,\n}: Readonly<VideoProps>): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n  const {\n    type,\n    url: rawUrl,\n    startTime,\n    subtitles: rawSubtitles,\n    endTime,\n    loop,\n    autoplay,\n    muted,\n  } = element\n  const url = useStliteMediaObjectUrl(rawUrl)\n  const subtitles = useStliteMediaObjects(rawSubtitles)\n\n  const preventAutoplay = useMemo<boolean>(() => {\n    if (!element.id) {\n      // Elements without an ID should never autoplay\n      return true\n    }\n\n    // Recover the state in case this component got unmounted\n    // and mounted again for the same element.\n    const preventAutoplay = elementMgr.getElementState(\n      element.id,\n      \"preventAutoplay\"\n    )\n\n    if (!preventAutoplay) {\n      // Set the state to prevent autoplay in case there is an unmount + mount\n      // for the same element.\n      elementMgr.setElementState(element.id, \"preventAutoplay\", true)\n    }\n    return preventAutoplay ?? false\n  }, [element.id, elementMgr])\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  // Stop the video at 'endTime' and handle loop\n  useEffect(() => {\n    const videoNode = videoRef.current\n    if (!videoNode) {\n      return\n    }\n\n    // Flag to avoid calling 'videoNode.pause()' multiple times\n    let stoppedByEndTime = false\n\n    const handleTimeUpdate = (): void => {\n      if (endTime > 0 && videoNode.currentTime >= endTime) {\n        if (loop) {\n          // If loop is true and we reached 'endTime', reset to 'startTime'\n          videoNode.currentTime = startTime || 0\n          videoNode.play()\n        } else if (!stoppedByEndTime) {\n          stoppedByEndTime = true\n          videoNode.pause()\n        }\n      }\n    }\n\n    if (endTime > 0) {\n      videoNode.addEventListener(\"timeupdate\", handleTimeUpdate)\n    }\n\n    return () => {\n      if (videoNode && endTime > 0) {\n        videoNode.removeEventListener(\"timeupdate\", handleTimeUpdate)\n      }\n    }\n  }, [endTime, loop, startTime])\n\n  // Handle looping the video\n  useEffect(() => {\n    const videoNode = videoRef.current\n    if (!videoNode) {\n      return\n    }\n\n    // Loop the video when it has ended\n    const handleVideoEnd = (): void => {\n      if (loop) {\n        videoNode.currentTime = startTime || 0 // Reset to startTime or to the start if not specified\n        videoNode.play()\n      }\n    }\n\n    videoNode.addEventListener(\"ended\", handleVideoEnd)\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"ended\", handleVideoEnd)\n      }\n    }\n  }, [loop, startTime])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime, endTime, loop, autoplay, muted } = element\n    const youtubeUrl = new URL(url)\n\n    if (startTime && !isNaN(startTime)) {\n      youtubeUrl.searchParams.append(\"start\", startTime.toString())\n    }\n\n    if (endTime && !isNaN(endTime)) {\n      youtubeUrl.searchParams.append(\"end\", endTime.toString())\n    }\n\n    if (loop) {\n      youtubeUrl.searchParams.append(\"loop\", \"1\")\n      // When using the loop parameter, YouTube requires the playlist parameter to be set to the same video ID\n      const videoId = youtubeUrl.pathname.split(\"/\").pop()\n\n      if (videoId) {\n        youtubeUrl.searchParams.append(\"playlist\", videoId)\n      }\n    }\n\n    if (autoplay) {\n      youtubeUrl.searchParams.append(\"autoplay\", \"1\")\n    }\n\n    if (muted) {\n      youtubeUrl.searchParams.append(\"mute\", \"1\")\n    }\n\n    return youtubeUrl.toString()\n  }\n\n  // Is this a YouTube link? If so we need a fancier tag.\n  // NOTE: This part assumes the URL is already an \"embed\" link.\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    return (\n      <StyledVideoIframe\n        className=\"stVideo\"\n        data-testid=\"stVideo\"\n        title={url}\n        src={getYoutubeSrc(url)}\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  // Only in dev mode we set crossOrigin to \"anonymous\" to avoid CORS issues\n  // when streamlit frontend and backend are running on different ports\n  return (\n    <video\n      className=\"stVideo\"\n      data-testid=\"stVideo\"\n      ref={videoRef}\n      controls\n      muted={muted}\n      autoPlay={autoplay && !preventAutoplay}\n      src={endpoints.buildMediaURL(url)}\n      style={{ width, height: width === 0 ? DEFAULT_HEIGHT : undefined }}\n      crossOrigin={\n        IS_DEV_ENV && subtitles.length > 0 ? \"anonymous\" : undefined\n      }\n    >\n      {subtitles &&\n        subtitles.map((subtitle: ISubtitleTrack, idx: number) => (\n          <track\n            key={idx}\n            kind=\"captions\"\n            src={endpoints.buildMediaURL(`${subtitle.url}`)}\n            label={`${subtitle.label}`}\n            default={idx === 0}\n          />\n        ))}\n    </video>\n  )\n}\n"],"names":["StyledVideoIframe","target","theme","colorScheme","border","padding","spacing","none","margin","width","aspectRatio","DEFAULT_HEIGHT","Video","element","endpoints","elementMgr","videoRef","useRef","type","url","rawUrl","startTime","subtitles","rawSubtitles","endTime","loop","autoplay","muted","useStliteMediaObjectUrl","useStliteMediaObjects","preventAutoplay","useMemo","id","getElementState","setElementState","useEffect","current","currentTime","videoNode","setStartTime","addEventListener","removeEventListener","stoppedByEndTime","handleTimeUpdate","play","pause","handleVideoEnd","getYoutubeSrc","youtubeUrl","URL","isNaN","searchParams","append","toString","videoId","pathname","split","pop","VideoProto","Type","YOUTUBE_IFRAME","jsx","buildMediaURL","height","undefined","map","subtitle","idx","label"],"mappings":"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"}