{"version":3,"file":"index-B9ZcZczO.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/TextInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/TextInput/TextInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledTextInputProps {\n  width: number\n}\n\nexport const StyledTextInput = styled.div<StyledTextInputProps>(\n  ({ width }) => ({\n    position: \"relative\",\n    width,\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useCallback, useState } from \"react\"\n\nimport uniqueId from \"lodash/uniqueId\"\nimport { Input as UIInput } from \"baseui/input\"\nimport { useTheme } from \"@emotion/react\"\n\nimport useOnInputChange from \"@streamlit/lib/src/hooks/useOnInputChange\"\nimport { TextInput as TextInputProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/hooks/useBasicWidgetState\"\nimport useUpdateUiValue from \"@streamlit/lib/src/hooks/useUpdateUiValue\"\nimport useSubmitFormViaEnterKey from \"@streamlit/lib/src/hooks/useSubmitFormViaEnterKey\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport { StyledTextInput } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nfunction TextInput({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  fragmentId,\n}: Props): ReactElement {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element.default])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    string | null,\n    TextInputProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useUpdateUiValue(value, uiValue, setUiValue, dirty)\n\n  /**\n   * Whether the input is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  const theme = useTheme()\n  const [id] = useState(() => uniqueId(\"text_input_\"))\n  const { placeholder, formId } = element\n\n  const commitWidgetValue = useCallback((): void => {\n    setDirty(false)\n    setValueWithSource({ value: uiValue, fromUi: true })\n  }, [uiValue, setValueWithSource])\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  const onBlur = useCallback((): void => {\n    if (dirty) {\n      commitWidgetValue()\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback((): void => {\n    setFocused(true)\n  }, [])\n\n  const onChange = useOnInputChange({\n    formId: element.formId,\n    maxChars: element.maxChars,\n    setDirty,\n    setUiValue,\n    setValueWithSource,\n  })\n\n  const onKeyPress = useSubmitFormViaEnterKey(\n    element.formId,\n    commitWidgetValue,\n    dirty,\n    widgetMgr,\n    fragmentId\n  )\n\n  return (\n    <StyledTextInput\n      className=\"stTextInput\"\n      data-testid=\"stTextInput\"\n      width={width}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UIInput\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        type={getTypeString(element)}\n        autoComplete={element.autocomplete}\n        overrides={{\n          Input: {\n            style: {\n              // Issue: https://github.com/streamlit/streamlit/issues/2495\n              // The input won't shrink in Firefox,\n              // unless the line below is provided.\n              // See https://stackoverflow.com/a/33811151\n              minWidth: 0,\n              \"::placeholder\": {\n                opacity: \"0.7\",\n              },\n              lineHeight: theme.lineHeights.inputWidget,\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.sm,\n              paddingLeft: theme.spacing.sm,\n              paddingBottom: theme.spacing.sm,\n              paddingTop: theme.spacing.sm,\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextInputRootElement\",\n            },\n            style: {\n              height: theme.sizes.minElementHeight,\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n            },\n          },\n        }}\n      />\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={element.maxChars}\n          inForm={isInForm({ formId: element.formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </StyledTextInput>\n  )\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: TextInputProto\n): string | null {\n  return widgetMgr.getStringValue(element) ?? null\n}\n\nfunction getDefaultStateFromProto(element: TextInputProto): string | null {\n  return element.default ?? null\n}\n\nfunction getCurrStateFromProto(element: TextInputProto): string | null {\n  return element.value ?? null\n}\n\nfunction updateWidgetMgrState(\n  element: TextInputProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<string | null>,\n  fragmentId?: string\n): void {\n  widgetMgr.setStringValue(\n    element,\n    vws.value,\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nfunction getTypeString(element: TextInputProto): string {\n  return element.type === TextInputProto.Type.PASSWORD ? \"password\" : \"text\"\n}\n\nexport default TextInput\n"],"names":["StyledTextInput","target","width","position","TextInput","disabled","element","widgetMgr","fragmentId","uiValue","setUiValue","useState","getStateFromWidgetMgr","dirty","setDirty","onFormCleared","useCallback","default","value","setValueWithSource","useBasicWidgetState","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","focused","setFocused","theme","useTheme","id","uniqueId","placeholder","formId","commitWidgetValue","fromUi","allowEnterToSubmit","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","onBlur","onFocus","onChange","useOnInputChange","maxChars","onKeyPress","useSubmitFormViaEnterKey","jsx","WidgetLabel","label","labelVisibilityProtoValueToEnum","labelVisibility","help","StyledWidgetLabelHelp","TooltipIcon","Placement","TOP_RIGHT","UIInput","getTypeString","autocomplete","Input","style","minWidth","opacity","lineHeight","lineHeights","inputWidget","paddingRight","spacing","sm","paddingLeft","paddingBottom","paddingTop","Root","props","height","sizes","minElementHeight","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","InputInstructions","getStringValue","vws","setStringValue","type","TextInputProto","Type","PASSWORD"],"mappings":"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"}