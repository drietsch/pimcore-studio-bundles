{"version":3,"file":"index-CTBkY3Oq.js","sources":["../../../streamlit/frontend/lib/src/components/elements/Audio/Audio.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useMemo, useRef } from \"react\"\n\nimport { Audio as AudioProto } from \"@streamlit/lib/src/proto\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { WidgetStateManager as ElementStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useStliteMediaObjectUrl } from \"@stlite/kernel\"\n\nexport interface AudioProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: AudioProto\n  elementMgr: ElementStateManager\n}\n\nexport default function Audio({\n  element,\n  width,\n  endpoints,\n  elementMgr,\n}: Readonly<AudioProps>): ReactElement {\n  const audioRef = useRef<HTMLAudioElement>(null)\n\n  const { startTime, endTime, loop, autoplay } = element\n\n  const preventAutoplay = useMemo<boolean>(() => {\n    if (!element.id) {\n      // Elements without an ID should never autoplay\n      return true\n    }\n\n    // Recover the state in case this component got unmounted\n    // and mounted again for the same element.\n    const preventAutoplay = elementMgr.getElementState(\n      element.id,\n      \"preventAutoplay\"\n    )\n\n    if (!preventAutoplay) {\n      // Set the state to prevent autoplay in case there is an unmount + mount\n      // for the same element.\n      elementMgr.setElementState(element.id, \"preventAutoplay\", true)\n    }\n    return preventAutoplay ?? false\n  }, [element.id, elementMgr])\n\n  // Handle startTime changes\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = startTime\n    }\n  }, [startTime])\n\n  useEffect(() => {\n    const audioNode = audioRef.current\n\n    const setStartTime: () => void = () => {\n      if (audioNode) {\n        // setStartTime\n        audioNode.currentTime = element.startTime\n      }\n    }\n\n    if (audioNode) {\n      audioNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (audioNode) {\n        audioNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  // Stop the audio at 'endTime' and handle loop\n  useEffect(() => {\n    const audioNode = audioRef.current\n    if (!audioNode) {\n      return\n    }\n\n    // Flag to avoid calling 'audioNode.pause()' multiple times\n    let stoppedByEndTime = false\n\n    const handleTimeUpdate = (): void => {\n      if (endTime > 0 && audioNode.currentTime >= endTime) {\n        if (loop) {\n          // If loop is true and we reached 'endTime', reset to 'startTime'\n          audioNode.currentTime = startTime || 0\n          audioNode.play()\n        } else if (!stoppedByEndTime) {\n          stoppedByEndTime = true\n          audioNode.pause()\n        }\n      }\n    }\n\n    if (endTime > 0) {\n      audioNode.addEventListener(\"timeupdate\", handleTimeUpdate)\n    }\n\n    return () => {\n      if (audioNode && endTime > 0) {\n        audioNode.removeEventListener(\"timeupdate\", handleTimeUpdate)\n      }\n    }\n  }, [endTime, loop, startTime])\n\n  // Handle looping the audio\n  useEffect(() => {\n    const audioNode = audioRef.current\n    if (!audioNode) {\n      return\n    }\n\n    // Loop the audio when it has ended\n    const handleAudioEnd = (): void => {\n      if (loop) {\n        audioNode.currentTime = startTime || 0 // Reset to startTime or to the start if not specified\n        audioNode.play()\n      }\n    }\n\n    audioNode.addEventListener(\"ended\", handleAudioEnd)\n\n    return () => {\n      if (audioNode) {\n        audioNode.removeEventListener(\"ended\", handleAudioEnd)\n      }\n    }\n  }, [loop, startTime])\n\n  const rawUrl = useStliteMediaObjectUrl(element.url)\n  const uri = endpoints.buildMediaURL(rawUrl)\n\n  return (\n    <audio\n      className=\"stAudio\"\n      data-testid=\"stAudio\"\n      ref={audioRef}\n      controls\n      autoPlay={autoplay && !preventAutoplay}\n      src={uri}\n      style={{ width }}\n    />\n  )\n}\n"],"names":["Audio","element","width","endpoints","elementMgr","audioRef","useRef","startTime","endTime","loop","autoplay","preventAutoplay","useMemo","id","getElementState","setElementState","useEffect","current","currentTime","audioNode","setStartTime","addEventListener","removeEventListener","stoppedByEndTime","handleTimeUpdate","play","pause","handleAudioEnd","rawUrl","useStliteMediaObjectUrl","url","uri","buildMediaURL"],"mappings":";AA8BA,SAAwBA,EAAM;AAAA,EAC5BC,SAAAA;AAAAA,EACAC,OAAAA;AAAAA,EACAC,WAAAA;AAAAA,EACAC,YAAAA;AACoB,GAAiB;AAC/BC,QAAAA,IAAWC,SAAyB,IAAI,GAExC;AAAA,IAAEC,WAAAA;AAAAA,IAAWC,SAAAA;AAAAA,IAASC,MAAAA;AAAAA,IAAMC,UAAAA;AAAAA,EAAAA,IAAaT,GAEzCU,IAAkBC,EAAAA,QAAiB,MAAM;AACzC,QAAA,CAACX,EAAQY;AAEJ,aAAA;AAKT,UAAMF,IAAkBP,EAAWU,gBACjCb,EAAQY,IACR,iBACF;AAEA,WAAKF,KAGHP,EAAWW,gBAAgBd,EAAQY,IAAI,mBAAmB,EAAI,GAEzDF,KAAmB;AAAA,EACzB,GAAA,CAACV,EAAQY,IAAIT,CAAU,CAAC;AAG3BY,EAAAA,EAAAA,UAAU,MAAM;AACd,IAAIX,EAASY,YACXZ,EAASY,QAAQC,cAAcX;AAAAA,EACjC,GACC,CAACA,CAAS,CAAC,GAEdS,EAAAA,UAAU,MAAM;AACd,UAAMG,IAAYd,EAASY,SAErBG,IAA2BA,MAAM;AACrC,MAAID,MAEFA,EAAUD,cAAcjB,EAAQM;AAAAA,IAEpC;AAEA,WAAIY,KACQE,EAAAA,iBAAiB,kBAAkBD,CAAY,GAGpD,MAAM;AACX,MAAID,KACQG,EAAAA,oBAAoB,kBAAkBF,CAAY;AAAA,IAEhE;AAAA,EAAA,GACC,CAACnB,CAAO,CAAC,GAGZe,EAAAA,UAAU,MAAM;AACd,UAAMG,IAAYd,EAASY;AAC3B,QAAI,CAACE;AACH;AAIF,QAAII,IAAmB;AAEvB,UAAMC,IAAmBA,MAAY;AACnC,MAAIhB,IAAU,KAAKW,EAAUD,eAAeV,MACtCC,KAEFU,EAAUD,cAAcX,KAAa,GACrCY,EAAUM,KAAK,KACLF,MACSA,IAAA,IACnBJ,EAAUO,MAAM;AAAA,IAGtB;AAEA,WAAIlB,IAAU,KACFa,EAAAA,iBAAiB,cAAcG,CAAgB,GAGpD,MAAM;AACPL,MAAAA,KAAaX,IAAU,KACfc,EAAAA,oBAAoB,cAAcE,CAAgB;AAAA,IAEhE;AAAA,EACC,GAAA,CAAChB,GAASC,GAAMF,CAAS,CAAC,GAG7BS,EAAAA,UAAU,MAAM;AACd,UAAMG,IAAYd,EAASY;AAC3B,QAAI,CAACE;AACH;AAIF,UAAMQ,IAAiBA,MAAY;AACjC,MAAIlB,MACFU,EAAUD,cAAcX,KAAa,GACrCY,EAAUM,KAAK;AAAA,IAEnB;AAEUJ,WAAAA,EAAAA,iBAAiB,SAASM,CAAc,GAE3C,MAAM;AACX,MAAIR,KACQG,EAAAA,oBAAoB,SAASK,CAAc;AAAA,IAEzD;AAAA,EAAA,GACC,CAAClB,GAAMF,CAAS,CAAC;AAEdqB,QAAAA,IAASC,EAAwB5B,EAAQ6B,GAAG,GAC5CC,IAAM5B,EAAU6B,cAAcJ,CAAM;AAE1C,+BACG,SACC,EAAA,WAAU,WACV,eAAY,WACZ,KAAKvB,GACL,UAAQ,IACR,UAAUK,KAAY,CAACC,GACvB,KAAKoB,GACL,OAAO;AAAA,IAAE7B,OAAAA;AAAAA,EAAAA,GACT;AAEN;"}