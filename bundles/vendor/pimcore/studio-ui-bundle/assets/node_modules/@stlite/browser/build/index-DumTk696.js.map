{"version":3,"file":"index-DumTk696.js","sources":["../../../node_modules/@tinyhttp/content-disposition/dist/index.js","../../kernel/dist/react-helpers/download-button.js","../../../streamlit/frontend/lib/src/components/widgets/DownloadButton/DownloadButton.tsx"],"sourcesContent":["// biome-ignore lint/suspicious/noControlCharactersInRegex: <explanation>\nconst ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g;\nconst HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;\nconst HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;\nconst NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g;\n// biome-ignore lint/suspicious/noControlCharactersInRegex: <explanation>\nconst QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g;\nconst QUOTE_REGEXP = /([\\\\\"])/g;\nconst PARAM_REGEXP = \n// biome-ignore lint/suspicious/noControlCharactersInRegex: <explanation>\n/;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g;\nconst TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/;\nconst TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;\nconst EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;\n// biome-ignore lint/suspicious/noControlCharactersInRegex: <explanation>\nconst DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/;\nconst getlatin1 = (val) => {\n    // simple Unicode -> ISO-8859-1 transformation\n    return String(val).replace(NON_LATIN1_REGEXP, '?');\n};\nexport class ContentDisposition {\n    constructor(type, parameters) {\n        this.type = type;\n        this.parameters = parameters;\n    }\n}\nconst qstring = (val) => `\"${String(val).replace(QUOTE_REGEXP, '\\\\$1')}\"`;\nconst pencode = (char) => `%${String(char).charCodeAt(0).toString(16).toUpperCase()}`;\nfunction ustring(val) {\n    const str = String(val);\n    // percent encode as UTF-8\n    const encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);\n    return `UTF-8''${encoded}`;\n}\nconst basename = (str) => str.slice(str.lastIndexOf('/') + 1);\nfunction format({ parameters, type }) {\n    if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\n        throw new TypeError('invalid type');\n    }\n    // start with normalized type\n    let string = String(type).toLowerCase();\n    // append parameters\n    if (parameters && typeof parameters === 'object') {\n        const params = Object.keys(parameters).sort();\n        for (const param of params) {\n            const val = param.slice(-1) === '*' ? ustring(parameters[param]) : qstring(parameters[param]);\n            string += `; ${param}=${val}`;\n        }\n    }\n    return string;\n}\nfunction createParams(filename, fallback) {\n    if (filename === undefined)\n        return {};\n    const params = {};\n    // fallback defaults to true\n    if (!fallback)\n        fallback = true;\n    if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\n        throw new TypeError('fallback must be ISO-8859-1 string');\n    }\n    // restrict to file base name\n    const name = basename(filename);\n    // determine if name is suitable for quoted string\n    const isQuotedString = TEXT_REGEXP.test(name);\n    // generate fallback name\n    const fallbackName = typeof fallback !== 'string' ? fallback && getlatin1(name) : basename(fallback);\n    const hasFallback = typeof fallbackName === 'string' && fallbackName !== name;\n    // set extended filename parameter\n    if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\n        params['filename*'] = name;\n    }\n    // set filename parameter\n    if (isQuotedString || hasFallback) {\n        params.filename = hasFallback ? fallbackName : name;\n    }\n    return params;\n}\nconst pdecode = (_str, hex) => String.fromCharCode(Number.parseInt(hex, 16));\n/**\n * Create an attachment Content-Disposition header.\n *\n * @param filename file name\n * @param options\n */\nexport function contentDisposition(filename, options = {}) {\n    // format into string\n    return format(new ContentDisposition(options.type || 'attachment', createParams(filename, options.fallback)));\n}\nfunction decodefield(str) {\n    const match = EXT_VALUE_REGEXP.exec(str);\n    if (!match)\n        throw new TypeError('invalid extended field value');\n    const charset = match[1].toLowerCase();\n    const encoded = match[2];\n    let value;\n    switch (charset) {\n        case 'iso-8859-1':\n            value = getlatin1(encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode));\n            break;\n        case 'utf-8':\n            try {\n                value = decodeURIComponent(encoded);\n            }\n            catch {\n                throw new TypeError('invalid encoded utf-8');\n            }\n            break;\n        default:\n            throw new TypeError('unsupported charset in extended field');\n    }\n    return value;\n}\n/**\n * Parse Content-Disposition header string.\n * @param header string\n */\nexport function parse(header) {\n    let match = DISPOSITION_TYPE_REGEXP.exec(header);\n    if (!match)\n        throw new TypeError('invalid type format');\n    // normalize type\n    let index = match[0].length;\n    const type = match[1].toLowerCase();\n    let key;\n    const names = [];\n    const params = {};\n    let value;\n    // calculate index to start at\n    index = PARAM_REGEXP.lastIndex = match[0].slice(-1) === ';' ? index - 1 : index;\n    // match parameters\n    while ((match = PARAM_REGEXP.exec(header))) {\n        if (match.index !== index)\n            throw new TypeError('invalid parameter format');\n        index += match[0].length;\n        key = match[1].toLowerCase();\n        value = match[2];\n        if (names.indexOf(key) !== -1) {\n            throw new TypeError('invalid duplicate parameter');\n        }\n        names.push(key);\n        if (key.indexOf('*') + 1 === key.length) {\n            // decode extended value\n            key = key.slice(0, -1);\n            value = decodefield(value);\n            // overwrite existing value\n            params[key] = value;\n            continue;\n        }\n        if (typeof params[key] === 'string')\n            continue;\n        if (value[0] === '\"') {\n            value = value.slice(1, value.length - 1).replace(QESC_REGEXP, '$1');\n        }\n        params[key] = value;\n    }\n    if (index !== -1 && index !== header.length) {\n        throw new TypeError('invalid parameter format');\n    }\n    return new ContentDisposition(type, params);\n}\n//# sourceMappingURL=index.js.map","import { parse } from \"@tinyhttp/content-disposition\";\nexport function getFileNameFromContentDispositionHeader(contentDisposition) {\n    const parsed = parse(contentDisposition);\n    if (parsed.type !== \"attachment\") {\n        return;\n    }\n    const filename = parsed.parameters.filename;\n    if (typeof filename !== \"string\") {\n        return;\n    }\n    return filename;\n}\nexport function downloadFileFromStlite(stliteKernel, url) {\n    stliteKernel\n        .sendHttpRequest({\n        method: \"GET\",\n        path: `${url}?title=${encodeURIComponent(document.title)}`,\n        headers: {},\n        body: \"\",\n    })\n        .then(({ statusCode, headers, body }) => {\n        if (statusCode !== 200) {\n            return;\n        }\n        const contentDispositionHeader = headers.get(\"Content-Disposition\");\n        const downloadFilename = (contentDispositionHeader &&\n            getFileNameFromContentDispositionHeader(contentDispositionHeader)) ??\n            \"\";\n        const type = headers.get(\"Content-Type\");\n        const blob = new Blob([body], type ? { type } : undefined);\n        const objectUrl = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", objectUrl);\n        link.setAttribute(\"target\", \"_blank\");\n        link.setAttribute(\"download\", downloadFilename);\n        link.click();\n        URL.revokeObjectURL(objectUrl);\n        link.remove();\n    });\n}\n//# sourceMappingURL=download-button.js.map","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport createDownloadLinkElement from \"@streamlit/lib/src/util/createDownloadLinkElement\"\nimport { DownloadButton as DownloadButtonProto } from \"@streamlit/lib/src/proto\"\nimport BaseButton, {\n  BaseButtonKind,\n  BaseButtonSize,\n  BaseButtonTooltip,\n  DynamicButtonLabel,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { useStliteKernel, downloadFileFromStlite } from \"@stlite/kernel\"\n\nexport interface Props {\n  endpoints: StreamlitEndpoints\n  disabled: boolean\n  element: DownloadButtonProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nexport function createDownloadLink(\n  endpoints: StreamlitEndpoints,\n  url: string,\n  enforceDownloadInNewTab: boolean\n): HTMLAnchorElement {\n  return createDownloadLinkElement({\n    enforceDownloadInNewTab,\n    url: endpoints.buildMediaURL(url),\n    filename: \"\",\n  })\n}\n\nfunction DownloadButton(props: Props): ReactElement {\n  const { disabled, element, widgetMgr, width, endpoints, fragmentId } = props\n  const style = { width }\n  const {\n    libConfig: { enforceDownloadInNewTab = false }, // Default to false, if no libConfig, e.g. for tests\n  } = React.useContext(LibContext)\n\n  let kind = BaseButtonKind.SECONDARY\n  if (element.type === \"primary\") {\n    kind = BaseButtonKind.PRIMARY\n  } else if (element.type === \"tertiary\") {\n    kind = BaseButtonKind.TERTIARY\n  }\n\n  const stliteKernel = useStliteKernel()\n\n  const handleDownloadClick: () => void = () => {\n    // Downloads are only done on links, so create a hidden one and click it\n    // for the user.\n    widgetMgr.setTriggerValue(element, { fromUi: true }, fragmentId)\n\n    if (element.url.startsWith(\"/media\")) {\n      downloadFileFromStlite(stliteKernel, element.url)\n      return\n    }\n\n    const link = createDownloadLink(\n      endpoints,\n      element.url,\n      enforceDownloadInNewTab\n    )\n    link.click()\n  }\n\n  // When useContainerWidth true & has help tooltip,\n  // we need to pass the container width down to the button\n  const fluidWidth = element.help ? width : true\n\n  return (\n    <div\n      className=\"stDownloadButton\"\n      data-testid=\"stDownloadButton\"\n      style={style}\n    >\n      <BaseButtonTooltip help={element.help}>\n        <BaseButton\n          kind={kind}\n          size={BaseButtonSize.SMALL}\n          disabled={disabled}\n          onClick={handleDownloadClick}\n          fluidWidth={element.useContainerWidth ? fluidWidth : false}\n        >\n          <DynamicButtonLabel icon={element.icon} label={element.label} />\n        </BaseButton>\n      </BaseButtonTooltip>\n    </div>\n  )\n}\n\nexport default DownloadButton\n"],"names":["HEX_ESCAPE_REPLACE_REGEXP","NON_LATIN1_REGEXP","QESC_REGEXP","PARAM_REGEXP","EXT_VALUE_REGEXP","DISPOSITION_TYPE_REGEXP","getlatin1","val","ContentDisposition","type","parameters","pdecode","_str","hex","decodefield","str","match","charset","encoded","value","parse","header","index","key","names","params","getFileNameFromContentDispositionHeader","contentDisposition","parsed","filename","downloadFileFromStlite","stliteKernel","url","sendHttpRequest","method","path","encodeURIComponent","document","title","headers","body","then","statusCode","contentDispositionHeader","get","downloadFilename","blob","Blob","undefined","objectUrl","URL","createObjectURL","link","createElement","setAttribute","click","revokeObjectURL","remove","createDownloadLink","endpoints","enforceDownloadInNewTab","createDownloadLinkElement","buildMediaURL","DownloadButton","props","disabled","element","widgetMgr","width","fragmentId","style","libConfig","React","useContext","LibContext","kind","BaseButtonKind","SECONDARY","PRIMARY","TERTIARY","useStliteKernel","handleDownloadClick","setTriggerValue","fromUi","startsWith","fluidWidth","help","jsx","BaseButtonTooltip","BaseButton","BaseButtonSize","SMALL","useContainerWidth","DynamicButtonLabel","icon","label"],"mappings":";;AAGA,MAAMA,IAA4B,sBAC5BC,IAAoB,0BAEpBC,IAAc,wBAEdC;AAAA;AAAA,EAEN;AAAA,GAGMC,IAAmB,uIAEnBC,IAA0B,oDAC1BC,IAAY,CAACC,MAER,OAAOA,CAAG,EAAE,QAAQN,GAAmB,GAAG;AAE9C,MAAMO,EAAmB;AAAA,EAC5B,YAAYC,GAAMC,GAAY;AAC1B,SAAK,OAAOD,GACZ,KAAK,aAAaC;AAAA,EAC1B;AACA;AAqDA,MAAMC,IAAU,CAACC,GAAMC,MAAQ,OAAO,aAAa,OAAO,SAASA,GAAK,EAAE,CAAC;AAW3E,SAASC,EAAYC,GAAK;AACtB,QAAMC,IAAQZ,EAAiB,KAAKW,CAAG;AACvC,MAAI,CAACC;AACD,UAAM,IAAI,UAAU,8BAA8B;AACtD,QAAMC,IAAUD,EAAM,CAAC,EAAE,YAAa,GAChCE,IAAUF,EAAM,CAAC;AACvB,MAAIG;AACJ,UAAQF,GAAO;AAAA,IACX,KAAK;AACD,MAAAE,IAAQb,EAAUY,EAAQ,QAAQlB,GAA2BW,CAAO,CAAC;AACrE;AAAA,IACJ,KAAK;AACD,UAAI;AACA,QAAAQ,IAAQ,mBAAmBD,CAAO;AAAA,MAClD,QACkB;AACF,cAAM,IAAI,UAAU,uBAAuB;AAAA,MAC3D;AACY;AAAA,IACJ;AACI,YAAM,IAAI,UAAU,uCAAuC;AAAA,EACvE;AACI,SAAOC;AACX;AAKO,SAASC,EAAMC,GAAQ;AAC1B,MAAIL,IAAQX,EAAwB,KAAKgB,CAAM;AAC/C,MAAI,CAACL;AACD,UAAM,IAAI,UAAU,qBAAqB;AAE7C,MAAIM,IAAQN,EAAM,CAAC,EAAE;AACrB,QAAMP,IAAOO,EAAM,CAAC,EAAE,YAAa;AACnC,MAAIO;AACJ,QAAMC,IAAQ,CAAE,GACVC,IAAS,CAAE;AACjB,MAAIN;AAIJ,OAFAG,IAAQnB,EAAa,YAAYa,EAAM,CAAC,EAAE,MAAM,EAAE,MAAM,MAAMM,IAAQ,IAAIA,GAElEN,IAAQb,EAAa,KAAKkB,CAAM,KAAI;AACxC,QAAIL,EAAM,UAAUM;AAChB,YAAM,IAAI,UAAU,0BAA0B;AAIlD,QAHAA,KAASN,EAAM,CAAC,EAAE,QAClBO,IAAMP,EAAM,CAAC,EAAE,YAAa,GAC5BG,IAAQH,EAAM,CAAC,GACXQ,EAAM,QAAQD,CAAG,MAAM;AACvB,YAAM,IAAI,UAAU,6BAA6B;AAGrD,QADAC,EAAM,KAAKD,CAAG,GACVA,EAAI,QAAQ,GAAG,IAAI,MAAMA,EAAI,QAAQ;AAErC,MAAAA,IAAMA,EAAI,MAAM,GAAG,EAAE,GACrBJ,IAAQL,EAAYK,CAAK,GAEzBM,EAAOF,CAAG,IAAIJ;AACd;AAAA,IACZ;AACQ,IAAI,OAAOM,EAAOF,CAAG,KAAM,aAEvBJ,EAAM,CAAC,MAAM,QACbA,IAAQA,EAAM,MAAM,GAAGA,EAAM,SAAS,CAAC,EAAE,QAAQjB,GAAa,IAAI,IAEtEuB,EAAOF,CAAG,IAAIJ;AAAA,EACtB;AACI,MAAIG,MAAU,MAAMA,MAAUD,EAAO;AACjC,UAAM,IAAI,UAAU,0BAA0B;AAElD,SAAO,IAAIb,EAAmBC,GAAMgB,CAAM;AAC9C;AC7JM,SAAUC,EACdC,GAA0B;AAE1B,QAAMC,IAASR,EAAMO,CAAkB;AACvC,MAAIC,EAAOnB,SAAS;AAClB;AAGF,QAAMoB,IAAWD,EAAOlB,WAAWmB;AACnC,MAAI,OAAOA,KAAa;AAIxB,WAAOA;AACT;AAEM,SAAUC,EACdC,GACAC,GAAW;AAEXD,EAAAA,EACGE,gBAAgB;AAAA,IACfC,QAAQ;AAAA,IACRC,MAAM,GAAGH,CAAG,UAAUI,mBAAmBC,SAASC,KAAK,CAAC;AAAA,IACxDC,SAAS,CAAE;AAAA,IACXC,MAAM;AAAA,GACP,EACAC,KAAK,CAAC;AAAA,IAAEC,YAAAA;AAAAA,IAAYH,SAAAA;AAAAA,IAASC,MAAAA;AAAAA,EAAI,MAAM;AACtC,QAAIE,MAAe;AACjB;AAGF,UAAMC,IAA2BJ,EAAQK,IAAI,qBAAqB,GAC5DC,KACHF,KACCjB,EAAwCiB,CAAwB,MAClE,IAEIlC,IAAO8B,EAAQK,IAAI,cAAc,GACjCE,IAAO,IAAIC,KAAK,CAACP,CAAI,GAAG/B,IAAO;AAAA,MAAEA,MAAAA;AAAAA,IAAM,IAAGuC,MAAS,GACnDC,IAAYC,IAAIC,gBAAgBL,CAAI,GAEpCM,IAAOf,SAASgB,cAAc,GAAG;AACvCD,IAAAA,EAAKE,aAAa,QAAQL,CAAS,GACnCG,EAAKE,aAAa,UAAU,QAAQ,GACpCF,EAAKE,aAAa,YAAYT,CAAgB,GAC9CO,EAAKG,MAAO,GAEZL,IAAIM,gBAAgBP,CAAS,GAC7BG,EAAKK,OAAQ;AAAA,EACf,CAAC;AACL;ACdgBC,SAAAA,EACdC,GACA3B,GACA4B,GACmB;AACnB,SAAOC,EAA0B;AAAA,IAC/BD,yBAAAA;AAAAA,IACA5B,KAAK2B,EAAUG,cAAc9B,CAAG;AAAA,IAChCH,UAAU;AAAA,EAAA,CACX;AACH;AAEA,SAASkC,EAAeC,GAA4B;AAC5C,QAAA;AAAA,IAAEC,UAAAA;AAAAA,IAAUC,SAAAA;AAAAA,IAASC,WAAAA;AAAAA,IAAWC,OAAAA;AAAAA,IAAOT,WAAAA;AAAAA,IAAWU,YAAAA;AAAAA,EAAAA,IAAeL,GACjEM,IAAQ;AAAA,IAAEF,OAAAA;AAAAA,EAAM,GAChB;AAAA,IACJG,WAAW;AAAA,MAAEX,yBAAAA,IAA0B;AAAA,IAAA;AAAA;AAAA,EAAM,IAC3CY,EAAMC,WAAWC,CAAU;AAE/B,MAAIC,IAAOC,EAAeC;AACtBX,EAAAA,EAAQzD,SAAS,YACnBkE,IAAOC,EAAeE,UACbZ,EAAQzD,SAAS,eAC1BkE,IAAOC,EAAeG;AAGxB,QAAMhD,IAAeiD,EAAgB,GAE/BC,IAAkCA,MAAM;AAK5C,QAFAd,EAAUe,gBAAgBhB,GAAS;AAAA,MAAEiB,QAAQ;AAAA,OAAQd,CAAU,GAE3DH,EAAQlC,IAAIoD,WAAW,QAAQ,GAAG;AACbrD,MAAAA,EAAAA,GAAcmC,EAAQlC,GAAG;AAChD;AAAA,IAAA;AAQFoB,IALaM,EACXC,GACAO,EAAQlC,KACR4B,CACF,EACKL,MAAM;AAAA,EACb,GAIM8B,IAAanB,EAAQoB,OAAOlB,IAAQ;AAE1C,+BACG,OACC,EAAA,WAAU,oBACV,eAAY,oBACZ,OAAAE,GAEA,UAAAiB,gBAAAA,EAAA,IAACC,GAAkB,EAAA,MAAMtB,EAAQoB,MAC/B,UAAAC,gBAAAA,EAAA,IAACE,GACC,EAAA,MAAAd,GACA,MAAMe,EAAeC,OACrB,UAAA1B,GACA,SAASgB,GACT,YAAYf,EAAQ0B,oBAAoBP,IAAa,IAErD,UAACE,gBAAAA,EAAA,IAAAM,GAAA,EAAmB,MAAM3B,EAAQ4B,MAAM,OAAO5B,EAAQ6B,OAAM,EAAA,CAC/D,EACF,CAAA,GACF;AAEJ;","x_google_ignoreList":[0]}