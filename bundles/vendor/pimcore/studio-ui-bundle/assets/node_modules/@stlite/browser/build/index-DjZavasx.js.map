{"version":3,"file":"index-DjZavasx.js","sources":["../../../streamlit/frontend/lib/src/components/widgets/TextArea/TextArea.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, memo, useCallback, useRef, useState } from \"react\"\n\nimport { Textarea as UITextArea } from \"baseui/textarea\"\nimport { useTheme } from \"@emotion/react\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport { TextArea as TextAreaProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport useUpdateUiValue from \"@streamlit/lib/src/hooks/useUpdateUiValue\"\nimport useSubmitFormViaEnterKey from \"@streamlit/lib/src/hooks/useSubmitFormViaEnterKey\"\nimport useOnInputChange from \"@streamlit/lib/src/hooks/useOnInputChange\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport {\n  isInForm,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/hooks/useBasicWidgetState\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextAreaProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ntype TextAreaValue = string | null\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: TextAreaProto\n): TextAreaValue | undefined => {\n  return widgetMgr.getStringValue(element) ?? element.default ?? null\n}\n\nconst getDefaultStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.default ?? null\n}\n\nconst getCurrStateFromProto = (element: TextAreaProto): TextAreaValue => {\n  return element.value ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: TextAreaProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<TextAreaValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setStringValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst TextArea: FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  fragmentId,\n  width,\n}) => {\n  // TODO: Update to match React best practices\n  // eslint-disable-next-line react-compiler/react-compiler\n  const id = useRef(uniqueId(\"text_area_\")).current\n\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  const [dirty, setDirty] = useState(false)\n  /**\n   * Whether the area is currently focused.\n   */\n  const [focused, setFocused] = useState(false)\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  const [uiValue, setUiValue] = useState<string | null>(\n    getStateFromWidgetMgr(widgetMgr, element) ?? null\n  )\n\n  const onFormCleared = useCallback(() => {\n    setUiValue(element.default ?? null)\n    setDirty(true)\n  }, [element])\n\n  const [value, setValueWithSource] = useBasicWidgetState<\n    TextAreaValue,\n    TextAreaProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  useUpdateUiValue(value, uiValue, setUiValue, dirty)\n\n  const theme: EmotionTheme = useTheme()\n\n  const commitWidgetValue = useCallback((): void => {\n    setDirty(false)\n    setValueWithSource({ value: uiValue, fromUi: true })\n  }, [uiValue, setValueWithSource])\n\n  const onBlur = useCallback(() => {\n    if (dirty) {\n      commitWidgetValue()\n    }\n    setFocused(false)\n  }, [dirty, commitWidgetValue])\n\n  const onFocus = useCallback(() => {\n    setFocused(true)\n  }, [])\n\n  const onChange = useOnInputChange({\n    formId: element.formId,\n    maxChars: element.maxChars,\n    setDirty,\n    setUiValue,\n    setValueWithSource,\n  })\n\n  const onKeyDown = useSubmitFormViaEnterKey(\n    element.formId,\n    commitWidgetValue,\n    dirty,\n    widgetMgr,\n    fragmentId,\n    true\n  )\n\n  const style = { width }\n  const { height, placeholder, formId } = element\n\n  // Show \"Please enter\" instructions if in a form & allowed, or not in form and state is dirty.\n  const allowEnterToSubmit = isInForm({ formId })\n    ? widgetMgr.allowFormEnterToSubmit(formId)\n    : dirty\n\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    focused && width > theme.breakpoints.hideWidgetDetails\n\n  return (\n    <div className=\"stTextArea\" data-testid=\"stTextArea\" style={style}>\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UITextArea\n        value={uiValue ?? \"\"}\n        placeholder={placeholder}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        aria-label={element.label}\n        disabled={disabled}\n        id={id}\n        overrides={{\n          Input: {\n            style: {\n              lineHeight: theme.lineHeights.inputWidget,\n\n              // The default height of the text area is calculated to perfectly fit 3 lines of text.\n              height: height ? `${height}px` : \"\",\n              minHeight: theme.sizes.largestElementHeight,\n              resize: \"vertical\",\n              \"::placeholder\": {\n                opacity: \"0.7\",\n              },\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              paddingRight: theme.spacing.lg,\n              paddingLeft: theme.spacing.lg,\n              paddingBottom: theme.spacing.lg,\n              paddingTop: theme.spacing.lg,\n            },\n          },\n          Root: {\n            props: {\n              \"data-testid\": \"stTextAreaRootElement\",\n            },\n            style: {\n              // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n              borderLeftWidth: theme.sizes.borderWidth,\n              borderRightWidth: theme.sizes.borderWidth,\n              borderTopWidth: theme.sizes.borderWidth,\n              borderBottomWidth: theme.sizes.borderWidth,\n            },\n          },\n        }}\n      />\n      {shouldShowInstructions && (\n        <InputInstructions\n          dirty={dirty}\n          value={uiValue ?? \"\"}\n          maxLength={element.maxChars}\n          type={\"multiline\"}\n          inForm={isInForm({ formId })}\n          allowEnterToSubmit={allowEnterToSubmit}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default memo(TextArea)\n"],"names":["getStateFromWidgetMgr","widgetMgr","element","getStringValue","default","getDefaultStateFromProto","getCurrStateFromProto","value","updateWidgetMgrState","valueWithSource","fragmentId","setStringValue","fromUi","TextArea","disabled","width","id","useRef","uniqueId","current","dirty","setDirty","useState","focused","setFocused","uiValue","setUiValue","onFormCleared","useCallback","setValueWithSource","useBasicWidgetState","theme","useTheme","commitWidgetValue","onBlur","onFocus","onChange","useOnInputChange","formId","maxChars","onKeyDown","useSubmitFormViaEnterKey","style","height","placeholder","allowEnterToSubmit","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","jsx","WidgetLabel","label","labelVisibilityProtoValueToEnum","labelVisibility","help","StyledWidgetLabelHelp","TooltipIcon","Placement","TOP_RIGHT","UITextArea","Input","lineHeight","lineHeights","inputWidget","minHeight","sizes","largestElementHeight","resize","opacity","paddingRight","spacing","lg","paddingLeft","paddingBottom","paddingTop","Root","props","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","InputInstructions","memo"],"mappings":"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"}